[{"lectures": "###Lesson 1: How to Get Started\n\n- Interview with Sergey Brin\n- Getting Started with Python\n- Processors\n- Grace Hopper\n- Variables\n- Strings and Numbers\n- Indexing Strings\n- String Theory\n\n###Lesson 2: How to Repeat\n\n- Introducing Procedures\n- Sum Procedure with a Return Statement\n- Equality Comparisons\n- If Statements\n- Or Function\n- Biggest Procedure\n- While Loops\n- Print Numbers\n\n###Lesson 2.5: How to Solve Problems\n\n- What are the Inputs\n- Algorithm Pseudocode\n- Optimizing\n\n###Lesson 3: How to Manage Data\n\n- Nested Lists\n- A List of Strings\n- Aliasing\n- List Operations\n- List Addition and Length\n- How Computers Store Data\n- For Loops\n- Popping Elements\n- Crawl Web\n\n### Lesson 4: Responding to Queries\n\n- Data Structures\n- Lookup\n- Building the Web Index\n- Latency\n- Bandwidth\n- Buckets of Bits\n- Protocols\n\n### Lesson 5: How Programs Run\n\n- Measuring Speed\n- Spin Loop\n- Index Size vs. Time\n- Making Lookup Faster\n- Hash Function\n- Testing Hash Functions\n- Implementing Hash Tables\n- Dictionaries\n- Modifying the Search Engine\n\n### Lesson 6: How to Have Infinite Power\n\n- Infinite Power\n- Counter\n- Recursive Definitions\n- Recursive Procedures\n- Palindromes\n- Recursive v. Iterative\n- Divide and Be Conquered \n- Ranking Web Pages\n\n### Lesson 7: Past, Present, and the Future of Computing\n\n- Past of Computing\n- Computer History Museum \n- First Hard Drive\n- Search Before Computers\n- Present of Computing\n- Slac and Big Data\n- Open Source\n- Future of Computing\n- Text Analysis\n- Energy Aware Computing\n- Computer Security\n- Quantum Computing", "name": "Intro to Computer Science", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-computer-science--cs101?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn key computer science concepts in this introductory Python course. You'll learn by doing, and will build your own search engine and social network.", "description": "In this introduction to computer programming course, you\u2019ll learn and practice key computer science concepts by building your own versions of popular web applications. You\u2019ll learn Python, a powerful, easy-to-learn, and widely used programming language, and you\u2019ll explore computer science basics, as you build your own search engine and social network."}, {"lectures": "### Lesson 1 -  <a href=\"https://udacity.com/course/viewer#!/c-ud304/l-2617868617\">From Design to Code</a>\n\nDiligently employ a code/test/refine strategy as you precisely and deliberately translate initial design documents into static web pages. You'll also investigate the Document Object Model (DOM) and its implications for web development.\n\n### Lesson 2 - <a href=\"https://udacity.com/course/viewer#!/c-ud304/l-2810388540\">Your Own Framework</a>\n\nTake pride in creating and personalising your own multi-platform, responsive CSS framework for publishing your professional portfolio projects to the web.\n\n### Lesson 3 - <a href=\"https://udacity.com/course/viewer#!/c-ud304/l-2794148535\">Learning and Using Bootstrap</a>\n\nStrategically investigate an existing professional CSS framework as you use it to build a website using responsive design principles while maintaining code readability.", "name": "Intro to HTML and CSS", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-html-and-css--ud304?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to convert digital design mockups into static web pages and how to build a responsive portfolio site to showcase your work.", "description": "HTML and CSS are markup languages and the building blocks that make up the web. This course is called \"Not your Typical Intro...\" because it does not follow the usual pattern of other courses and tutorials that you find on the Internet. Usually HTML and CSS are taught with a focus on language syntax. But knowing syntax alone does not enable you to create a webpage from a design. You need to know where to start and how to approach the task, in other words - you need to learn how to think like a front-end developer. \n\nIn this course you will learn how to convert digital design mockups into static web pages. We will teach you how to approach page layout, how to break down a design mockup into page elements, and how to implement that in HTML and CSS.\n\nYou will also learn about responsive design techniques, which are increasingly important in a world where mobile devices and TV screens are used more and more often to look for information and entertainment."}, {"lectures": "### Lesson 1: Getting Up and Running\n\nLearn about the tools we'll be using throughout the course and begin modifying web pages with a little bit of code.\n\n- Introduction of r\u00e9sum\u00e9 project\n- Components of the r\u00e9sum\u00e9\n- Introduction to browser developer tools\n- Running commands on the console\n- Appending elements to the page\n\n### Lesson 2: Data Types\n\nDig deeper into JavaScript as we introduce you to the building blocks of the language as you write more complex code using variables and advanced data structures like JSON, Objects, and Arrays.\n\n- Variables\n- Strings\n- Evaluating values\n- Arrays\n- Objects\n- JSON\n- Validating JSON\n\n### Lesson 3: Flow Control\n\nFinish the r\u00e9sum\u00e9 while you learn how to make your code more modular and reusable by using conditional statements, loops, and functions.\n\n- Conditional statements\n- For and while loops\n- Functions\n- Encapsulation", "name": "JavaScript Basics", "language": "en", "homepage": "https://www.udacity.com/course/javascript-basics--ud804?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn JavaScript syntax and coding conventions that web developers use to create interactive and dynamic websites while you create an online r\u00e9sum\u00e9 for your portfolio.", "description": "We're here to get you started with JavaScript!\nIn the twenty plus years since its inception, JavaScript has become the lingua franca of the web, that's to say, it's become the main tool to create interactive content on the Internet.\n\nIn this course, you'll explore the JavaScript programming language by creating an interactive version of your r\u00e9sum\u00e9. You\u2019ll learn the JavaScript programming fundamentals you need while building new elements and sections to enhance your r\u00e9sum\u00e9.\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd001\">Front-End Web Developer</a> Nanodegree."}, {"lectures": "###Lesson 1: Navigating a Commit History\nIn this lesson, you\u2019ll learn about a few different types of version control systems and discover what makes Git a great version control system for programmers.  You\u2019ll also get practice using Git to view the history of an existing project.  You\u2019ll learn to see all the versions that have been saved, checkout a previous version, and compare two different versions.\n###Lesson 2: Creating and Modifying a Repository\nIn this lesson, you\u2019ll learn how to create a repository and save versions of your project.  You\u2019ll learn about the staging area, committing your code, branching, and merging, and how you can use these to make you more efficient and effective.\n###Lesson 3: Using GitHub to Collaborate\nIn this lesson, you\u2019ll get practice using GitHub or other remote repositories to share your changes with others and collaborate on multi-developer projects.  You\u2019ll learn how to make and review a pull request on GitHub.  Finally, you\u2019ll get practice by collaborating with other Udacity students to write a create-your-own-adventure story.\n\n###Project: Contribute to a Live Project\nStudents will publish a repository containing their reflections from the course and submit a pull request to a collaborative Create-Your-Own-Adventure story.", "name": "How to Use Git and GitHub", "language": "en", "homepage": "https://www.udacity.com/course/how-to-use-git-and-github--ud775?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn to use version control, an important tool for any developer.  The course will focus on Git, a specific version control system, and GitHub, a collaboration platform.", "description": "Effective use of version control is an important and useful skill for any developer working on long-lived (or even medium-lived) projects, especially if more than one developer is involved. This course, *built with input from GitHub*, will introduce the basics of using version control by focusing on a particular version control system called Git and a collaboration platform called GitHub.\n\nThis course is part of the  <a href=\"https://www.udacity.com/course/nd001\" target=\"_blank\">Front End</a> and  <a href=\"https://www.udacity.com/course/nd004\" target=\"_blank\">Full Stack Nanodegrees</a>.."}, {"lectures": "### Lesson 1: Introduction to Computers, Programming Languages, Algorithms, and the Java Programming Environment\n\n### Lesson 2: Introduction to Classes and Objects\n\n### Lesson 3: Graphics\n\n### Lesson 4: Fundamental Data Types\n\n### Lesson 5: Decisions\n\n### Lesson 6: Iterations\n\n### Lesson 7: Arrays, ArrayLists and Simple Array Algorithms\n\n### Lesson 8: Methods (Parameter Passing, Instance vs. Static Methods)\n\n### Lesson 9: Inheritance", "name": "Intro to Java Programming", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-java-programming--cs046?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn essential computer science and object-oriented programming concepts in this introductory Java course.", "description": "In this introductory course, you'll learn and practice essential computer science concepts using the Java programming language. You'll learn about Object Oriented Programming, a technique that allows you to use code written by other programmers in your own programs. You'll put your new Java programming skills to the test by solving real-world problems faced by software engineers."}, {"lectures": "### Lesson 0: Introduction (30 min)\nWe will begin with an introduction from the instructor. More specifically, we will talk about the projects we will build and the ideas we will learn in this course. Then we will conduct a short test to ensure you have all the prerequisites necessary for the course. Finally, we will work together to download Python on your computer.\n\n### Lesson 1: Using Functions (3.5 hours)\nWe will use functions (webbrowser.open and os.rename) from the Python Standard Library to build two projects in this lesson. After that we will present a scenario where using functions will not present a very elegant solution; this will illuminate the need for a new programming tool called Classes.\n\n### Lesson 2: Using Classes (5 hours)\nHere we will learn about important object-oriented programming concepts like classes and instances. We will build three cool projects while using classes. These include drawing shapes with Turtle, sending text messages with Twilio and checking curse words with a function called open.\n\nWe will leverage modules from within the Python Standard Library and also learn to download and use an external Python package (twilio).\n\n### Lesson 3: Making Classes (5 hours)\nIn this lesson we will learn to create our first class. While doing this we will build a website that plays trailers of your favorite movies. Here are some of the programming ideas we will learn in this lesson:\n\n- How to create a class\n- How to instantiate an object\n- How to access class attributes and methods \n- What is the self keyword\n- What are constructors (\\__init__)\n- What are DocStrings\n- How to create and access Class Variables\n- How does Inheritance work\n- How to override methods  \n\n### Final Project (6 hours)\nHere, you will use the skills learned in this course to identify a problem statement and idea for a project. You will then identify step-by step directions (in simple English) to design a solution for the previously identified problem. Finally, you will use this design and your newly learned object-oriented programming skills to write code to realize your project.", "name": "Programming Foundations with Python", "language": "en", "homepage": "https://www.udacity.com/course/programming-foundations-with-python--ud036?utm_medium=referral&utm_campaign=api", "shortDescription": "Introductory programming class to learn Object-Oriented Programming, a must-have technique to reuse and share code easily. Learn by making projects that spread happiness!", "description": "In this introductory programming class, you\u2019ll learn Object-Oriented Programming, a must-have technique for software engineers that will allow you to reuse and share code easily. You\u2019ll learn by doing, and will build byte-sized (ha!) mini projects in each lesson to learn and practice programming concepts. \n\nWe\u2019ve heard that programming can be intimidating for newcomers, and we\u2019ve created this course to make sure that you have a great learning experience! You\u2019ll learn ***actively*** with our mini projects (see the awesome list below), which you\u2019ll be able to share proudly with your friends. You\u2019ll also learn important programming concepts one by one, with no surprises or leaps of logic along the way. \n\nYou\u2019ll pick up some great tools for your programming toolkit in this course! You will: \n\n- Start coding in the programming language Python;\n- Reuse and share code with Object-Oriented Programming;\n- Create and share amazing, life-hacking projects!   \n\n\nThis introductory course is for you if you want to be a software engineer, or if you want to collaborate with programmers. Mastering Object-Oriented Programming will propel your career in tech forward, and it\u2019s also a great way to learn how software engineers think about solving problems.\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd004\" target=\"_blank\">Full Stack Web Developer</a> Nanodegree."}, {"lectures": "###Lesson 1: Introduction (1 hour)\nIn this lesson, you'll get up and running with Xcode, the environment used to program iOS apps. You'll also learn to start reading Swift code by identifying important syntax.\n###Lesson 2: Making v1 of Our App (3 hours)\nIn this lesson, you'll create a simplified version of the final app by adding buttons, images, and text to a precise location on the phone. You'll also learn about MVC (Model-View-Controller) architecture and how it is used in app development. \n\nWe will introduce you to the following iOS classes in this lesson:\n\n - UIButton\n - UILabel\n - NSLayoutConstraint\n - UIView\n - UIViewController\n\nWe will also introduce you to the following framework:\n\n - UIKit\n\n###Lesson 3a: Navigating Between Two Screens in our App (2 hours)\nIn this lesson, you'll learn how to smoothly transition between two screens in our app.  Throughout this lesson, we will discuss something called the View Lifecycle - this includes a conversation around how to load different objects in our app and how to handle low memory-related events. \n\nWe will introduce you to the following iOS classes in this lesson:\n\n - UINavigationController\n \n###Lesson 3b: Playing Audio (4 hours)\nIn this lesson, we'll play a short audio clip from a famous movie, and will tinker with this movie quote to make it play super fast and really slowly. Here, you'll also begin to establish credibility as a professional developer by authoring a public blog post on how to accomplish a specific task in Swift.\n\nWe will introduce you to the following iOS classes in this lesson:\n\n - AVAudioPlayer\n\nWe will also introduce you to the following framework: \n\n - AVFoundation\n\n###Lesson 4a: Recording Audio (2 hours)\nIn this lesson, you'll put finishing touches on the app by learning to record your voice. Here, we will explore a powerful iOS idea called Delegates, which makes it really easy to create apps. \n\nWe will introduce you to the following iOS classes in this lesson:\n\n - AVAudioRecorder\n\n###Lesson 4b: Adding Chipmunk and Darth Vader Effects (3 hours)\n\nIn this lesson, we will learn to alter the pitch of the audio we recorded in lesson 4a. This change will make your voice sound like a Chipmunk or Darth Vader.\nAt the end of this lesson you'll have the know-how to install the app on your phone.\n\nWe will introduce you to the following iOS classes in this lesson:\n\n - AVAudioEngine\n - AVAudioPlayerNode\n - AVAudioUnitTimePitch\n\n\n###Final App Submission (1 hour)\nIn this final lesson, you will ensure that your app works according to a rubric we have designed, and will also have an opportunity to add new features to your app. We will also share with you a Code Review document that contains suggestions from an external reviewer on how to improve your code. We will request that you implement those suggestions to enhance your code and make it ready for the app store. Finally, to complete the course, you will submit your app to a Udacity coach for a thorough evaluation of your work.", "name": "Intro to iOS App Development with Swift", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-ios-app-development-with-swift--ud585?utm_medium=referral&utm_campaign=api", "shortDescription": "Take the first step in becoming an iOS Developer by learning about Swift and writing your first app.", "description": "In this course we will build an iPhone app that records a conversation between you and a friend, and then makes your voices sound like a Chipmunk or Darth Vader.\n\nThis course will introduce you to iOS app development in Swift, a new programming language from Apple, and serves as your launching point into the [iOS Developer Nanodegree](https://www.udacity.com/course/nd003)."}, {"lectures": "### Lesson 1: Create Project Sunshine with a Simple UI (5-8 hrs) \nStarting by installing Android Studio, you\u2019ll create your first project with a simple list-based user interface and built and deploy it to virtual and actual devices. You\u2019ll also discover what makes mobile - and Android in particular - a unique environment for app development.\n\n* Android Studio, Gradle, and debugging tools\n* User Interface and Layout managers\n* ListViews and Adapters\n\n### Lesson 2: Connect Sunshine to the Cloud (8-10 hrs) \nReplace the mock data with real weather data by connecting Sunshine up to an Internet back-end courtesy of the Open Weather Map API. You\u2019ll learn how to add permissions to your app, initiate network I/O, and how to move time consuming tasks like network data transfers  off the main UI thread.\n\n* Threading and ASyncTask\n* HTTP requests on web APIs\n* Android Permission System\n\n### Lesson 3: Create New Activities and Navigate Apps with Intents (8-10 hrs) \nGive your app structure and create more complex Activities. You\u2019ll learn about Android\u2019s Intent framework, and how to use Intents to navigate between Activities, both within your app and as a way to add 3rd party functionality.\n\n* App navigation with Explicit Intents\n* Implicit Intents to incorporate 3rd-party apps \n* Share Intent and the Android sharing framework\n* Broadcast Intents and Broadcast Receivers\n\n### Lessons 4: Use Content Providers and Loaders to Persist and Recover Data (15-20 hrs) \nLearn how the Android framework manages the activity lifecycle, and how it differs from what you might expect, and dive head-first into the world of persistent storage. Learn how to create databases, use Android\u2019s Content Providers to provide an abstraction layer between your data and your UI implementation, and use Loaders to efficiently load stored data.\n\n* Activity lifecycle and background activity termination\n* SQLite databases and JUnit tests\n* Creating and using a Content Provider as an abstraction layer\n* Using Loaders to asynchronously load data\n* Creating Adapters to bind UI components to Content Providers\n\n### Lesson 5: Implement Rich and Responsive Layouts (8-10 hrs) \nCreate rich, responsive user interfaces that work across a variety of different hardware types and screen sizes. You\u2019ll learn more details on using the Android Layout managers, Fragments, UI widgets, and Android design principles to add visual polish to your user interfaces, and how to create your own controls from scratch.\n\n* Fundamental Android design principles\n* Supporting localization and variable screen sizes \n* Optimizing tablet UIs using Fragments\n* Accessibility Features\n* Custom views\n\n### Lesson 6: Use Services and Notifications to Run in the Background (5-8 hrs) \nDeliver a great user experience, even when your app isn\u2019t visible. Learn how the Android framework manages background apps; and discover how to use Services and Notifications to make your app to be active when it\u2019s not in the foreground. You\u2019ll learn techniques for efficient data transfers using SyncAdapters and Google Cloud Messaging, so your app can stay up-to-date without draining the battery.\n\n* Background services and alarms to schedule background tasks\n* Efficient background data transfers with SyncAdapters \n* Rich notifications to interact with users\n\n### Final Project (10-20 hours)\nBuild your own Android app incorporating the skills you've learned in this course.", "name": "Developing Android Apps", "language": "en", "homepage": "https://www.udacity.com/course/developing-android-apps--ud853?utm_medium=referral&utm_campaign=api", "shortDescription": "Build a cloud-connected Android app, and learn the tools, principles, and best practices of mobile and Android development that you'll apply to your own projects.", "description": "Android Fundamentals blends theory and practice to help you build great apps the right way. In this course, you'll work with instructors, step-by-step, to build an Android app, and learn best practices of mobile development in general and Android development in particular.\n\n####[Download Udacity's Android app](https://play.google.com/store/apps/details?id=com.udacity.android) to keep learning wherever you go!"}, {"lectures": "### Lesson 0: Welcome!\nAn introduction to the course content and structure.\n### Lesson 1: Render\nHow to identify and diagnose the key performance problems that come with drawing to the screen. \n### Lesson 2: Compute and Memory\nUnderstand how code is executed in your program, and how to handle the performance problems associated with compute and memory. \n### Lesson 3: Battery\nHow to detect and diagnose battery problems, and why it matters to your users.", "name": "Android Performance", "language": "en", "homepage": "https://www.udacity.com/course/android-performance--ud825?utm_medium=referral&utm_campaign=api", "shortDescription": "Performance matters to users, so it must matter to you. Learn how to identify and fix bottlenecks in your Android applications, and ensure a smooth user experience.", "description": "If you\u2019ve ever hit performance issues that affect your app\u2019s usability, this course will teach you how to identify and diagnose your performance problems. By the end of this course, you\u2019ll be able to perform exploratory tests, run profiling tools, use outputs to navigate to problematic code, and design a plan of attack to mitigate poor performance. You\u2019ll also gain a higher level of understanding about how program code and the Android platform interact, which will help you optimize for performance in the future."}, {"lectures": "### Lesson 1: Data and Tables\nIn this lesson, you'll learn about how relational databases let you structure data into tables. You'll learn about the importance of unique keys and relationships between tables.\n\n### Lesson 2: <s>Elephants</s> Elements of SQL\nIn this lesson, you'll begin learning SQL, the Structured Query Language used by most relational databases. You'll learn about the **select** and **insert** statements, the basic operations for getting data out of a database and putting data into a database. You'll learn about the operators and syntax available to get the database to scan and join tables for you.\n\n### Lesson 3: Python DB-API\nIn this lesson, you'll learn how to access a relational database from Python code. You'll use a virtual machine (VM) running on your own computer to run a Python web application, and adapt that application to use a database backend. Then you'll learn about some of the most common security pitfalls of database-backed applications, including the famous <a href=\"http://xkcd.com/327/\" target=\"_blank\">Bobby Tables</a>. This lesson also covers the SQL **update** and **delete** statements.\n\n### Lesson 4: Deeper Into SQL\nIn this lesson, you'll learn how to design and create new databases. You'll learn about normalized design, which makes it easier to write effective code using a database. You'll also learn how to use the SQL **join** operators to rapidly connect data from different tables.\n\n### Lesson 5: Final Project\nIn this project, you'll use your Python and SQL knowledge to build a database-backed Python module to run a game tournament. You'll design the database schema and write code to implement an API for the project.", "name": "Intro to Relational Databases", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-relational-databases--ud197?utm_medium=referral&utm_campaign=api", "shortDescription": "Relational databases are a powerful tool used throughout the industry. Learn the basics of SQL and how to connect your Python code to a relational database.", "description": "This course is a quick, fun introduction to using a relational database from your code, using examples in Python. You'll learn the basics of SQL (the Structured Query Language) and database design, as well as the Python API for connecting Python code to a database. You'll also learn a bit about protecting your database-backed web apps from common security problems.\n\nAfter taking this course, you'll be able to write code using a database as a backend to store application data reliably and safely."}, {"lectures": "<h3>Lesson 1 - Working with the CRUD</h3> \nIn the first lesson, you will learn about CRUD; Create, Read, Update, and Delete. You will learn why this acronym is important in web development and implement CRUD operations on a database. You will also learn to use an ORM (Object-Relational Mapping) as an alternative to SQL.\n<h3>Lesson 2 - Making a Web Server</h3>\n<p>In the second lesson, you will build a web server from scratch using Python and some of the pre-installed libraries it includes. You will learn what GET and POST requests are and how we use them to retrieve and modify information on a web site. We will then use the concepts learned in Lesson 1 to add CRUD functionality to our website.\n<h3>Lesson 3 - Developing with Frameworks</h3>\nIn the third lesson, we will discuss web frameworks like Django and Ruby on Rails. You will see how web frameworks simplify the development process and allow us to create web applications faster. We will use the Flask web framework to develop our own web application. We will also discuss API's (Application Programming Interfaces) and add JSON (JavaScript Object Notation) endpoints to our application to allow data to be sent in a format alternative to HTML. \n<h3>Lesson 4 - Iterative Development</h3>\nIn the last lesson, you will build an entire web application on your own. You will learn about the iterative development process and how developing iteratively allows you to have a working prototype throughout all stages of the development process.", "name": "Full Stack Foundations", "language": "en", "homepage": "https://www.udacity.com/course/full-stack-foundations--ud088?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the fundamentals of back-end web development by creating your own web application from the ground up using the iterative development process.", "description": "In this course you will learn the fundamentals of back-end web development! You will create your own web application that queries a database for items on restaurant menus and then dynamically generates complete menus in the form of web pages and API endpoints.\n\nYou\u2019ll start by learning how to interact with a database from a web application using an Object-Relational Mapping (ORM) layer. From there, you\u2019ll learn how GET and POST requests translate to CRUD operations. You\u2019ll then explore the Flask framework and the various ways in which it can speed up the development of your applications. Finally, you\u2019ll develop your very own web application from the ground up using the iterative development process."}, {"lectures": "### Lesson 1 - Authentication vs. Authorization\nLearn the difference between the concepts of authentication and authorization and address some major security concerns that developers must protect against when developing a web application.  You will learn how OAuth 2.0 makes implementing security easier for developers and users alike by allowing your users to sign in to your applications while keeping all of the security on well-known and trusted OAuth providers. Finally, you will see OAuth 2.0 in action as you make API requests using Google's OAuth 2.0 Playground.\n\n### Lesson 2 - Creating a Google+ Sign-In\nLearn about the different types of security flows your application can implement. You will see how security can be handled by your server, your user's browser, or both depending on the type of security your application needs.  You will then add a Google+ Sign-In to an existing web application and implement a hybridized client/server flow.\n\n\n### Lesson 3 - Local Permission Systems\nAdd python code to create server-side rules that will constitute a permission system. This system will limit access of the database for each logged in user based on how the developer designs this code. You will add a User model model to your database to store the credentials, such as username, email, and profile picture, collected from the OAuth provider's API.\n\n###Lesson 4 - Adding Facebook & Other Providers\nLearn to implement multiple OAuth providers on your web application. You will add Facebook Login as an alternative sign in option for your users and understand how to use OAuth provider documentation to add as many providers as you see fit for your application.", "name": "Authentication & Authorization: OAuth", "language": "en", "homepage": "https://www.udacity.com/course/authentication-authorization-oauth--ud330?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn to implement the OAuth 2.0 framework to allow users to securely and easily login to your web applications.", "description": "As a Python programmer, leveraging Flask allows you to quickly and easily build your own web applications. But before you share your apps on the Internet you should protect your users' data, ensuring information stored on your site is safe from unwanted manipulation. You could implement web security and permissions on your own, but relying on trusted providers is a faster, safer, and easier way to allow users to login to your application - without having to create and maintain another account, profile, and password. \n\nIn this course, you will learn to implement the OAuth 2.0 framework to allow users to securely login to your web applications. You'll be provided a  <a href=\"http://udacity-oauth.herokuapp.com\" target=\"_blank\">restaurant menu application</a> created in Flask. By the end of this course, you will write the necessary code to implement Google+ Sign-In and Facebook Login in options so users can create restaurant menus that are viewable by everyone but only modifiable by the original creator."}, {"lectures": "### Overview\nThis course consists of 5 lessons. The first one is an overview of responsive design and introduces the way you\u2019ll need to shift your thinking as you go from desktop first design, to responsive design.  Lessons 2, 3, 4 and 5 will cover the important theoretical concepts of responsive design, and include plenty of hands-on exercises implementing what you\u2019ve learned.  \n\n### Lesson 1 - Why Responsive?\nWhat is responsive web design and why is it important? What kinds of devices should we be targeting with our design? How can we best leverage the different capabilities of each device to provide great experiences to users? You\u2019ll also make sure that your development environment is ready to go. \n\n<strong>Topics covered:</strong>\n\n* What is responsive design?\n* Why does responsive design work for any device?\n* Remote debugging and emulation in the browser\n\n### Lesson 2 - Starting Small\nThe best way to get started is to start small and build up. In this lesson, we\u2019ll cover the key components that make a site great on a small screen, including setting the viewport, adding content and sizing the content to the viewport.  You\u2019ll start the home town site project, by making sure that it looks good on a small screen.  \n\n<strong>Topics covered:</strong>\n\n* Why start small and build up?\n* What is the viewport?\n* Sizing content the content to the viewport\n  * avoiding static sized items\n* Touch targets, and why they should be large\n\n### Lesson 3 - Building Up\nOnce you\u2019ve got a page optimized for small screens, it\u2019s time to start thinking about how they\u2019ll look on larger screens.  Learn how to use CSS media queries to add breakpoints that change the layout depending on the screen size or other device characteristics.\n\n<strong>Topics covered:</strong>\n\n* CSS media queries\n* What is a breakpoint, and how to choose one\n* Using the CSS flexbox to modify layout\n\n### Lesson 4 - Common Responsive Patterns\nNow that you\u2019ve got the basics of responsive design down, you\u2019ll learn about and practice some of the common layout design patterns used across sites. You'll also iterate on the home town site project, creating breakpoints for tablet and desktop layouts using the patterns from this lesson.\n\n<strong>Topics covered:</strong>\n\n* Mostly fluid pattern\n* Column drop pattern\n* Layout shifter pattern\n* Off canvas pattern\n\n### Lesson 5 - Optimizations\nLearn strategies for minor breakpoints used to adjust the margins or padding on an element, or increase the font size to make it feel more natural in the layout. You\u2019ll also learn about strategies for dealing with tables and optimal text readability. At the end of the lesson, you'll iterate for the last time on the home town site, adding minor breakpoints to really make the experience stand out.\n\n<strong>Topics covered:</strong>\n\n* Minor break points\n* Optimizing text layout\n  * font size\n  * optimal line length\n* Responsive tables, and strategies for dealing with them", "name": "Responsive Web Design Fundamentals", "language": "en", "homepage": "https://www.udacity.com/course/responsive-web-design-fundamentals--ud893?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn and practice strategies for developing websites that look great on every device! Made with Google's Pete LePage.", "description": "In this course you'll learn the fundamentals of responsive web design with Google's Pete LePage! You'll create your own responsive web page that works well on any device - phone, tablet, desktop or anything in between.\n\nYou\u2019ll start by exploring what makes a site responsive and how some common responsive design patterns work across different devices.  From there, you\u2019ll learn how to create your own responsive layout using the viewport tag and CSS media queries.  As you proceed, you\u2019ll experiment with major and minor breakpoints, and optimizing text for reading."}, {"lectures": "### Lesson 1 - Getting up and Running\n\nBefore you start working with responsive images, you need to start debugging on your mobile devices. This lesson will help you get started with Developer Tools and mobile debugging.\n\n###Lesson 2 - Units, Formats, Environments\n\nYou can't optimize what you can't measure. In this lesson, you will start with comparing different kinds of images on the web and getting familiar with different units you can use to scale them.\n\nYou will also get a chance to set up your development environment so that responsive images become a painless part of your workflow.\n\nAt the end of the lesson, you will start working on the responsive blog project, where you have a chance to apply responsive image principles in a real-world scenario!\n\n<strong>Topics covered:</strong>\n\n* Sizing Images\n* File Types\n* Automation Tools\n\n### Lesson 3 - Images with Markup\n\nNot all graphics need to be .JPGs or .PNGs. This lesson dives into using markup techniques like CSS and icon fonts to create responsive graphics. While markup techniques are awesome because they are natively responsive, they are often **extremely** lightweight, requiring a fraction of the bytes of traditional images!\n\nAt the end of the lesson, you will replace extraneous images with markup techniques and take advantage of font icons to add social media icons to the responsive blog project!\n\n<strong>Topics covered:</strong>\n\n* CSS Techniques\n* Inlining Images\n* Unicode\n* Icon fonts\n\n### Lesson 4 - Full Responsiveness\n\nHere comes the full monty! In this lesson, you will make your images fully responsive using the new `<picture>` element! Along the way, you will use the `srcset` and `sizes` attributes. You will also learn the importance of `alt` attributes for your visually impaired users.\n\nAt the end of this lesson, you will make the blog project fully responsive, as you implement `<picture>` to display beautiful images across a range of device widths and pixel ratios.\n\n<strong>Topics covered:</strong>\n\n* `<picture>`\n* `sizes` attribute\n* `srcset` attribute\n* `alt` attributes", "name": "Responsive Images", "language": "en", "homepage": "https://www.udacity.com/course/responsive-images--ud882?utm_medium=referral&utm_campaign=api", "shortDescription": "Go beyond image tags! Learn how to make images a part of your responsive design workflow.", "description": "Did you know that images account for more than **60%** of the bytes on average needed to load a web page?\n\nIn this course you will learn how to work with images on the modern web, so that your images look great and load quickly on any device.\n\nAlong the way, you will pick up a range of skills and techniques to smoothly integrate responsive images into your development workflow. By then end of the course, you will be developing with images that adapt and respond to different viewport sizes and usage scenarios."}, {"lectures": "###Project\n\n*The News Aggregator App* - Turn an unusable app into a high performance, 60 frame per second experience. You'll be given a news aggregator app that uses the <a href=\"https://github.com/HackerNews/API\" target=\"_blank\">Hacker News API</a> to display the day's top stories. The news aggregator has *lots* of performance issues. You'll demonstrate your understanding of performance by destroying all the jank and creating an experience that users will love.\n\n###Lesson 1 - The Critical Rendering Path\n\n* You'll play Jank Invaders to develop your eye for jank!\n* You'll learn how the browser turns HTML into pixels on the page\n* You'll learn how different CSS styles affect the rendering pipeline differently.\n\n###Lesson 2 - App Lifecycles\n\n* You'll learn how there are four distinct phases in an app's lifecycle: Response, Animation, Idle and Load (RAIL).\n* You'll learn how your frame budget changes depending on where the user is in RAIL.\n* You'll practice thinking through app workloads at different stages in RAIL.\n\n###Lesson 3 - Weapons of Jank Destruction\n\n* You'll learn how to make sense of the Timeline panel in Chrome DevTools.\n* You'll practice profiling a few different apps to find the source of jank.\n\n###Lesson 4 - JavaScript\n\n* You'll optimize JavaScript to hit 60fps during animations.\n* You'll move expensive JavaScript operations off the main thread and into Web Workers.\n* You'll debug a janky copy of a production quality app - <a href=\"https://qrsnapper.appspot.com/\" target=\"_blank\">the QR Snapper</a>.\n\n###Lesson 5 - Styles and Layout\n\n* You'll learn how accessing the wrong CSS properties at inopportune moments can create loads of extra work for the browser.\n* You'll debug multiple instances of one of the nastiest performance problems - Forced Synchronous Layout.\n\n###Lesson 6 - Compositing and Painting\n\n* You'll practice profiling layer and paint performance with the paint profiler tool in the DevTools Timeline.\n* You'll manage and optimize layers to reduce the number of steps the browser needs to take to render each frame.\n* You'll demonstrate everything you've learned about performance as you de-jankify the News Aggregator App!", "name": "Browser Rendering Optimization", "language": "en", "homepage": "https://www.udacity.com/course/browser-rendering-optimization--ud860?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will demystify the browser's rendering pipeline and make it easy for you to build high performance web apps.", "description": "<a href=\"https://twitter.com/hashtag/PERFMATTERS?src=hash\" target=\"_blank\">Performance matters</a> to users. Web developers need to build apps that react quickly and render smoothly.\n\nGoogle performance guru Paul Lewis is here to help you destroy <a href=\"http://jankfree.org/\" target=\"_blank\">jank</a> and create web apps that maintain 60 frames per second performance.\n\nYou'll leave this course with the tools you need to profile apps and identify the causes of jank. You'll explore the browser's rendering pipeline and uncover patterns that make it easy to build performant apps."}, {"lectures": "###Overview\nThis course consists of 6 lessons. First one is an overview of cloud computing and the benefits of Platform as a Service. Lessons 2-5 will cover important theoretical concepts of Google App Engine and also plenty of hands-on exercises implementing what you have learned. Lesson 6 will be a short intro on an easy way to create native mobile apps that talk to your backend.\n\n###Lesson 1: Scalability Basics\nDo you know how and why server racks were invented years ago? Have you realized all of the problems that you have to solve if you will try to scale your app by yourself? Learn about a better way.\n\n###Lesson 2: Getting Started\nSet up your first App Engine project and learn how to define Cloud Endpoints. \n\nStart the course project app - Conference Central and add authentication and user profiles.\n\n###Lesson 3: Storing and Retrieving Data\nOne of the most important things you want to do in your app is storing data. In this lesson you will learn what is Google App Engine Datastore, how is it different from RDBMS and how you can use it in your applications.\n\nAdd the ability to store and retrieve user profiles and conferences to the course project app.\n\n###Lesson 4: Advanced Datastore Concepts\nLearn more about how Datastore works, including queries, filters, indexes and transactions. \n\nAdd different ways to query conferences.\n\n###Lesson 5: Advanced App Engine Topics\nThere are a lot of things you might want your application to do in background, without making the user wait, or even initiate the process. Learn about task queues and cron jobs and how you can use them to add advanced functionality to your app. You will also learn about Memcache, and get an overview of topics like Edge Caching, AppStats and other methods of optimizing your apps performance.\n\nAdd a push queue, cron job and a customized Memcache entry to your app.", "name": "Developing Scalable Apps in Python", "language": "en", "homepage": "https://www.udacity.com/course/developing-scalable-apps-in-python--ud858?utm_medium=referral&utm_campaign=api", "shortDescription": "You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer.", "description": "You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer. And more importantly - you will learn how to harness the power of **App Engine** - Platform as a Service, run by Google, so you can focus on your application's features, not on managing infrastructure that runs your app. Let Google run and scale the infrastructure and do what you do best - write code! \n\nHowever, to use App Engine effectively, you have to learn how it works, and this is exactly what this course will teach! You will also learn the best practices of using <a href=\"https://cloud.google.com/products/cloud-endpoints/\" target=\"_blank\">Cloud Endpoints</a> that allow you to easily create API services and make them accessible to iOS, Android and Javascript clients. They allow you to automatically generate client libraries to make wiring up the frontend easy. And there are some nifty built-in features, like denial-of-service protection and OAuth 2.0 support."}, {"lectures": "###Lesson 1: Changing Expectations\nWe'll first start by building a project the way you already know how: without an overarching organizational paradigm. Specifically, we'll discuss pain points and difficulties that are easy to run into when you don't use an organizational model. Then, we'll discuss a paradigm that will help us in the future, and we\u2019ll see some examples of that paradigm in action.\n\n###Lesson 2: Refactoring\nWe'll spend some time discussing how our new paradigm applies to the project we worked on in Lesson 1. Then we'll rebuild the project with the new organizational paradigm.\n\n###Lesson 3: Using an Organizational Library\nFinally, we'll explore how to use KnockoutJS, an organizational library, to organize our code and to reduce the amount of boilerplate code we write. Our resulting application will be well-organized, easy to understand, and extendable.", "name": "JavaScript Design Patterns", "language": "en", "homepage": "https://www.udacity.com/course/javascript-design-patterns--ud989?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the importance of code organization and how to implement it with either vanilla JavaScript or an organizational library or framework.", "description": "This course covers methods for organizing your code, both conceptually and literally. You\u2019ll learn the importance of separating concerns when writing JavaScript, gaining hands-on experience along the way. Separating concerns can be done with or without an organizational library or framework. We\u2019ll learn how to separate concerns without one, and then we\u2019ll explore an organizational library together. You\u2019ll also learn strategies for exploring other libraries and frameworks on your own.\n\nBy the end of this course, you\u2019ll understand (from experience) the importance of code organization, and how to implement it with either vanilla JavaScript or an organizational library or framework. Your applications will start looking clean and professional\u2014not just to your users, but also to anyone who looks at the code driving your applications."}, {"lectures": "### Overview\nThis course consists of 2 lessons. In the first lesson, you'll discover the importance of testing and reconsider its purpose and the value it provides. In the second lesson, you'll explore the <a href=\"http://jasmine.github.io/\" target=\"_blank\">Jasmine</a> testing framework write your own test suites while developing an address book application.\n\n### Lesson 1: Rethinking Testing\nFrom education to aerospace, tests provide invaluable feedback to those that analyze the results. In this lesson, you'll learn all about the importance of testing, how to identify the expectations a test is attempting to validate and how to write expectations in code.\n\n**Topics covered:**\n\n* What is a test?\n* Validating opinions\n* Identifying and defining expectations\n* Writing expectations in code\n\n### Lesson 2: Writing Test Suites\n\nJavaScript doesn't support testing natively, so you'll need a framework to provide the functionality you need. In this lesson, you'll get an introductions to the <a href=\"http://jasmine.github.io/\" target=\"_blank\">Jasmine</a> testing framework and use the red-green-refactor workflow to begin development on an address book application.\n\n**Topics covered:**\n\n* Introduction to Jasmine\n* Writing suites, specs and tests\n* The red-green-refactor workflow cycle\n* Testing asynchronous functionality", "name": "JavaScript Testing", "language": "en", "homepage": "https://www.udacity.com/course/javascript-testing--ud549?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to iterate on your web applications with confidence using the red-green-refactor workflow cycle and automated testing frameworks.", "description": "In this course you'll learn how to write JavaScript applications with confidence, using the red-green-refactor workflow. You'll write comprehensive suites of tests that validate your application is functioning as intended at all times.\n\nYou'll start by exploring how other industries use a variety of tests and the value it provides. You'll then start writing your very own tests, using the Jasmine testing framework. Finally, you'll start developing your very own address book application using the red-green-refactor workflow and explore a variety of scenarios including testing asynchronous functions."}, {"lectures": "### Lesson 1: What We Now Know\n\n- History of the Corporation\n- Startups Are Not Smaller Versions of Large Companies\n- Waterfall Development\n- Customer vs. Product Development\n- Entrepreneurial Education\n\n### Lessons 1.5A and 1.5B: Business Models and Customer Development\n\n- Value Proposition \n- Customer Segments\n- Revenue Streams\n- Key Resources\n- Customer Development Processes \n- Minimum Viable Product\n- Market Opportunity Analysis\n\n\n### Lesson 2: Value Proposition\n\n- Value Proposition and the Minimum Viable Product\n- Customer Archetype \n- MVP Physical && Web/Mobile\n- Common Mistakes With Value Proposition\n\n### Lesson 3: Customer Segments\n\n- Product Market Fit\n- Rank and Day in the Life\n- Multiple Customer Segments\n- Market Types Introduction: Existing, Resegmented, New, Clone \n- Consequences of Not Understanding a Market\n\n### Lesson 4: Channels\n\n- Distribution Channels Overview\n- Web Distribution \n- Physical Distribution\n- Direct Channel Fit\n- Indirect Channel Economics\n- OEM Channel Economics\n\n### Lesson 5: Customer Relationships\n\n- Paid Demand Creation\n- Earned Demand Creation\n- Get Physical\n- Viral Loop\n- Web Customer Acquisition Costs\n\n### Lesson 6: Revenue Models\n\n- How Do You Make Money\n- Revenue Streams and Price\n- Direct and Ancillary Models\n- Common Startup Mistakes\n- Market Types and Pricing\n- Single and Multiple Side Markets\n- Revenue First Companies\n- Market Size and Share\n\n### Lesson 7: Partners\n\n- Partner Definition\n- Partner Resources\n- Partner Types\n- Greatest Strategic Alliance\n- Joint Business Development\n\n### Lesson 8: Resources, Activities and Costs\n\n- Four Critical Resources\n- Financial Resources\n- Human Resources\n- Qualified Employees and Culture\n- Intellectual Property Overview", "name": "How to Build a Startup", "language": "en", "homepage": "https://www.udacity.com/course/how-to-build-a-startup--ep245?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn what it takes to build a successful startup using the Customer Development process, where entrepreneurs \"get out of the building\" to gather and iterate on feedback.", "description": "In an introduction to the basics of the famous Customer Development Process, Steve Blank provides insight into the key steps needed to build a successful startup. \n\nThe main idea in this course is learning how to rapidly develop and test ideas by gathering massive amounts of customer and marketplace feedback. Many startups fail by not validating their ideas early on with real-life customers. In order to mitigate that, students will learn how to get out of the building and search for the real pain points and unmet needs of customers. Only with these can the entrepreneur find a proper solution and establish a suitable business model.\n\nBuilding a startup is not simply building an execution plan for a business model that the entrepreneur thinks will work, but rather, a search for the actual business model itself."}, {"lectures": "###Lesson 1: Outlets and Actions\nIn this lesson, you\u2019ll learn to connect outlets and actions using only code and graphically using storyboard. In this lesson\u2019s Swift Session, you\u2019ll also learn about using optionals in Swift.\n\nYou\u2019ll use the following UIKit classes in this lesson:\n\n* UIButton\n* UILabel\n* UISwitch\n\n###Lesson 2: View Presentations and Segues\nIn this lesson, you\u2019ll learn how to present views modally. You\u2019ll also learn about closures in this lesson\u2019s Swift Session.\n\nWe will introduce you to the following UIKit classes:\n\n* UIImagePickerController\n* UIAlertController\n* UIActivityViewController\n\n###Lesson 3: The Delegate Pattern\nMany of the most common UIKit components make use of the delegate pattern. In this lesson, you\u2019ll learn how delegates make important connections between the model, view, and controller. You\u2019ll also learn about protocols in this lesson\u2019s Swift Session.\n\nWe will introduce you to the following UIKit classes:\n\n* UITextField\n* UITextFieldDelegate\n\n###Lesson 4: Tables\nTable views are one of the most commonly used views in iOS apps. In this lesson, you\u2019ll learn how to implement tables in your own apps. You\u2019ll also learn about collections and tuples in this lesson\u2019s Swift Session.\n\nWe will introduce you to the following UIKit classes: \n\n* UITableView\n* UITableViewDelegate\n* UITableViewDataSource\n* UITableViewCell\n\n###Lesson 5: Navigation\nIn this lesson, you\u2019ll learn how iOS uses navigation stacks to manage multiple views in an app. You\u2019ll take UITableViews a step further and create the navigation structure that enables a user to tap a row of a table, view the details of an item, and return again. You\u2019ll also learn about classes and structs in this lesson\u2019s Swift Session.\n\nWe will introduce you to the following UIKit classes:\n\n* UINavigationController\n* UIBarButtonItem\n\n###Lesson 6: MemeMe Techniques\nThis lesson will guide you through the process of creating your own version of the meme generating app, MemeMe. You\u2019ll learn about collection views, tab bar controllers, how to adjust the screen to accommodate the keyboard, and how to access the camera.\n\nWe will introduce you to the following UIKit classes:\n\n* UICollectionView\n* UICollectionViewDelegate\n* UICollectionViewDatasource\n* UITabBarController\n\nWe will also feature classes from the Foundation framework:\n\n* NSNotification\n* NSNotificationCenter", "name": "UIKit Fundamentals", "language": "en", "homepage": "https://www.udacity.com/course/uikit-fundamentals--ud788?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the iOS UIKit framework, which is the cornerstone of creating user interfaces in all iOS apps and crucial for any iOS Developer to be intimately familiar with.", "description": "In this course, you will build a series of simple apps to become more comfortable with the UIKit framework and master its most widely used components. This framework constitutes the building blocks of the user interface for all iOS apps, and is crucial for any iOS Developer to be intimately familiar with."}, {"lectures": "###Lesson 1: Networking and Web Services\nIn this lesson, you\u2019ll learn all about networks and how they work. You\u2019ll also build your first app that utilizes a web service: \u201cSleeping in the Library.\u201d This app uses the Flickr API to pull pictures of people sleeping in libraries.\n###Lesson 2: Building \u201cFlick Finder\u201d\nIn this lesson, you\u2019ll learn how to parse JSON data and display it to a user. You\u2019ll demonstrate these new skills by building the \u201cFlick Finder\u201d app, which displays Flickr images based on a phrase or location.\n###Lesson 3: The MovieDB and Authentication\nIn this lesson, you\u2019ll learn the difference between user and anonymously accessed data. You\u2019ll do so by building the \u201cMy Favorite Movies\u201d app that utilizes the Movie Database API.\n###Lesson 4: Improving Networking with MVC\nIn this lesson, you\u2019ll improve on your \u201cMy Favorite Movies\u201d app to build the \u201cMovie Manager\u201d app. For this app, we\u2019ll be sure to use good MVC design, and learn what this means from a networking perspective.\n###Lesson 5: Reliability and \u201cOn the Map\u201d\nIn this lesson, you\u2019ll start on your final project app, \u201cOn the Map.\u201d You\u2019ll also learn about network reliability, and how your app should behave if a network can\u2019t be reached.", "name": "iOS Networking with Swift", "language": "en", "homepage": "https://www.udacity.com/course/ios-networking-with-swift--ud421?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to incorporate networking into your apps to access data from around the world. Build the On the Map app to share location and fun links with fellow students.", "description": "In this course, you\u2019ll learn how to incorporate networking into your apps, so they can access data from around the world. You\u2019ll learn how to harness the power of APIs to display images and retrieve movie data. At the end of the course, you\u2019ll build the \u201cOn the Map\u201d app which allows you to share interesting links, projects, or other information with fellow Udacity students."}, {"lectures": "###Lesson 1: NSUserDefaults\nIn this lesson, you\u2019ll learn about the memory applications for each state in an app\u2019s life cycle. You\u2019ll also learn to persist an app in the \u201cnot running\u201d state using NSUserDefaults and the Documents Directory.\n\nWe\u2019ll introduce you to the following iOS classes in this lesson:\n\n* NSUserDefaults\n* NSFileManager\n\n###Lesson 2: NSCoder/NSKeyedArchiver\nIn this lesson, you\u2019ll learn to persist arrays and dictionaries to the Documents directory, and persist custom structs using a Keyed Archiver.\n\nWe\u2019ll introduce you to the following iOS classes in this lesson:\n\n* NSKeyedArchiver\n* NSKeyedUnarchiver\n\nWe\u2019ll also introduce you to the following protocol:\n\n* NSCoding\n\n###Lesson 3: Persistent Objects & Core Data\nIn this lesson, you\u2019ll be introduced to the Core Data framework, Apple\u2019s favorite framework for the model class. You\u2019ll learn how Core Data manages its stack using a pre-built app, \u201cFavorite Actors.\u201d\n\nWe\u2019ll introduce you to the following iOS classes in this lesson:\n\n* NSManagedObject\n* NSManagedObjectContext\n* NSFetchRequest\n\n###Lesson 4: Core Data from Scratch\nIn this lesson, you\u2019ll learn how to create a Core Data stack from the ground up. You will also learn how to specify relationships between you your Core Data managed objects. By the end, you\u2019ll be proficient enough to describe every element in a Core Data project.\n\nWe\u2019ll introduce you to the following iOS classes in this lesson:\n\n* NSManagedObjectModel\n* NSPersistentStoreCoordinator\n\n###Lesson 5: Smart Architecture with Core Data\nIn this lesson, you\u2019ll learn how Core Data relates to MVC design as Apple envisioned it. You will learn how to architect apps so that controller objects are notified whenever the data stored in Core Data changes, allowing the controllers to keep the views updated in ways that keep your code trim and extensible. \n\nWe\u2019ll introduce you to the following iOS classes in this lesson:\n\n* NSFetchResultsController\n* NSFetchResultsControllerDelegate", "name": "iOS Persistence and Core Data", "language": "en", "homepage": "https://www.udacity.com/course/ios-persistence-and-core-data--ud325?utm_medium=referral&utm_campaign=api", "shortDescription": "Persisting data is a core skill for any iOS developer. Learn how to store app data to your device's hard drive using two common techniques: Core Data & NSKeyedArchiver.", "description": "Persisting data is a core skill for any iOS developer. This course will teach you two techniques for storing data to your device\u2019s hard drive: the NSKeyedArchiver method and the more complex, but robust Core Data."}, {"lectures": "###Lesson 1: Research\nIn this first lesson, you'll brainstorm and vet multiple app ideas. You'll begin to think about the UI elements used in each, get user feedback on the designs, as well as start thinking about relevant web APIs and libraries to use.\n\n###Lesson 2: Build\nIn this lesson, you'll choose an idea to pursue and build it! We'll share tips for getting started, dealing with code that doesn't work, and how to submit to the App Store.\n\n###Lesson 3: Reflect\nIn this last lesson, you'll reflect on the process: what went well, and what you might do differently next time. Recognizing and learning from mistakes is what makes you a better developer!", "name": "How to Make an iOS App", "language": "en", "homepage": "https://www.udacity.com/course/how-to-make-an-ios-app--ud607?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the process of building an app, taking your ideas from drawing board to App Store!", "description": "Want to build an app for the iPhone or iPad from the ground up, but don't know where to begin? Look no further! In this course, you'll learn the process of building an iOS app, from brainstorming ideas to publishing on the App Store."}, {"lectures": "### Lesson 1: Overview of A/B Testing\nThis lesson will cover what A/B testing is and what it can be used for. It will also cover an example A/B test from start to finish, including how to decide how long to run the experiment, how to construct a binomial confidence interval for the results, and how to decide whether the change is worth the launch cost.\n\n### Lesson 2: Policy and Ethics for Experiments\nThis lesson will cover how to make sure the participants of your experiments are adequately protected and what questions you should be asking regarding the ethicality of experiments. It will cover four main ethics principles to consider when designing experiments: the risk to the user, the potential benefits, what alternatives users have to participating in the experiment, and the sensitivity of the data being collected.\n\n### Lesson 3: Choosing and Characterizing Metrics\nOne of the most important and time-consuming pieces of designing an A/B test is choosing and validating metrics to use in evaluating your experiment. This lesson will cover techniques for brainstorming metrics, what to do when you can't measure what you want directly, and characteristics you should consider when validating your metrics.\n\n### Lesson 4: Designing an Experiment\nThis lesson will cover how to design an A/B test. This includes how to choose which users will be in your experiment and control group - different online definitions of a \"user\", and what effects different choices will have on your experiment. It will also cover when to  limit your experiment to a subset of your entire user base, how to calculate how many events you will need in order to draw strong conclusions from your results, and how this translates into how long to run the experiment. Finally, the lesson will cover how various design decisions affect the size of your experiment, so you will know which decisions to revisit if you need results more quickly.\n\n### Lesson 5: Analyzing Results\nThis lesson will cover how to analyze the results of your experiments. Step one is always to run some sanity checks so that you can catch problems with your experiment set-up. Then, you will learn how to check conclusions with multiple methods, including a hypothesis test on the effect size and a binomial sign test, if you get results that surprise you. You will also learn how measuring multiple metrics for the same experiment can make analysis difficult, and some techniques for handling multiple metrics. Finally, you will learn about several analysis \"gotchas\", and what to do if you see them, including how Simpson's Paradox can affect A/B tests, and why even statistically significant results might disappear when you launch.\n\n### Final Project: Design and Analyze an A/B Test\nMake design decisions for an A/B test, including which metrics to measure and how long the test should be run. Analyze the results of an A/B test that was run by Udacity and recommend whether or not to launch the change.", "name": "A/B Testing", "language": "en", "homepage": "https://www.udacity.com/course/ab-testing--ud257?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will cover the design and analysis of A/B tests, which are online experiments used throughout tech industry by companies like Google, Amazon, and Netflix.", "description": "This course will cover the design and analysis of A/B tests, also known as split tests, which are online experiments used to test potential improvements to a website or mobile application. Two versions of the website are shown to different users - usually the existing website and a potential change. Then, the results are analyzed to determine whether the change is an improvement worth launching. This course will cover how to choose and characterize metrics to evaluate your experiments, how to design an experiment with enough statistical power, how to analyze the results and draw valid conclusions, and how to ensure that the the participants of your experiments are adequately protected."}, {"lectures": "### Lesson 1a Visualization Fundamentals (2 hour)\nLearn about the elements of great data visualization. In this lesson, you will meet data visualization experts, learn about data visualization in the context of data science, and learn how to represent data values in visual form.\n\n### Lesson 1b D3 Building Blocks (4 hours)\nLearn how to use the open standards of the web to create graphical elements. You\u2019ll learn how to select elements on the page, add SVG elements, and how to style SVG elements. Make use of all the Instructor Notes throughout this lesson if you have little to no experience with HTML and CSS.\n\n### Mini-Project 1: RAW Visualization (2 hour)\nCreate a data visualization using a software of your choice. We will provide recommendations for visualization software as well as data sets. We want you to get right into making data visualization so here\u2019s your first chance!\n\n### Lesson 2a Design Principles (2 hours)\nWhich chart type should I use for my data? Which colors should I avoid when making graphics? How do I know if my graphic is effective? Investigate these questions, and learn about the World Cup data set which will be use throughout the rest of the course.\n\n### Lesson 2b Dimple.js (4 hours)\nLearn how to create graphics using the Dimple JavaScript library. You will learn about this library as a gentle coding introduction before learning about D3.js. You will be able to produce great graphics with minimal code, and all of your graphics will come with interactivity without any extra effort on your part. Dimple, it's simple!\n\n### Mini-Project 2: Take Two (2-5 hours)\nFind an existing data visualization, critique it for what it does well and what it doesn\u2019t do well, and finally, recreate the graphic using a software tool of your choice. We recommend using Dimple.js, which is covered in Lesson 2b, but we don\u2019t want you to feel constrained by the choice of tools. Use any tool that works for you.\n\n### Special Note\nAt this point in the course, you can start the final project. The remaining content of the course covers narrative structures, types of bias, and maps. All of the code  in Lesson 3 and Lesson 4 pertains to d3.js. If you'd like to learn d3.js and complete the final project using d3.js, then please continue. If you prefer to stop, you can complete the final project using dimple.js.\n\n### Lesson 3 Narratives (5 hours)\nLearn how to incorporate different narrative structures into your visualizations and code along with Jonathan as you create a graphic for the World Cup data set. You\u2019ll learn about different types of bias in the data visualization process and learn how to add context to your data visualizations. By the end of this lesson, you\u2019ll have a solid foundation in D3.js.\n\n### Lesson 4 Animation and Interaction (5 hours)\nStatic graphics are great, but interactive graphics can be even better. Learn how to leverage animation and interaction to bring more data insights to your audience. Code along with Jonathan once again as you learn how to create a bubble map for the World Cup data set.\n\n### Final Project: Making an Effective Data Visualization (2 hours or more)\nYou will create a data visualization that conveys a clear message about a data set. You will use dimple.js or d3.js and collect feedback along the way to arrive at a polished product.\n####<b>NOTE:</b> As a free student, you are welcome to complete the project to showcase your learning; however, only students enrolled in the <a href=\"https://www.udacity.com/course/nd002\" target=\"_blank\">Data Analyst Nanodegree</a> are able to submit the final project for review and certificate. Interested in enrolling? <a href=\"https://www.udacity.com/course/nd002\" target=\"_blank\">Find out more!</a>", "name": "Data Visualization and D3.js", "language": "en", "homepage": "https://www.udacity.com/course/data-visualization-and-d3js--ud507?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the fundamentals of data visualization and apply design and narrative concepts to create your own visualization.", "description": "Learn the fundamentals of data visualization and practice communicating with data. This course covers how to apply design principles, human perception, color theory, and effective storytelling to data visualization. If you present data to others, aspire to be an analyst or data scientist, or if you\u2019d like to become more technical with visualization tools, then you can grow your skills with this course.\n\nThe course does not cover exploratory approaches to discover insights about data. Instead, the course focuses on how to visually encode and present data to an audience once an insight has been found.\n\nThis course is part of the <a href=\"https://www.udacity.com/course/nd002\" target=\"_blank\">Data Analyst Nanodegree</a>."}, {"lectures": "You\u2019ll learn how to start with a question and/or a dataset, and use machine learning to turn them into insights. \n\n###Lessons 1-4: Supervised Classification\n\n**Naive Bayes:** We jump in headfirst, learning perhaps the world\u2019s greatest algorithm for classifying text.\n\n**Support Vector Machines (SVMs):** One of the top 10 algorithms in machine learning, and a must-try for many classification tasks.  What makes it special?  The ability to generate new features independently and on the fly.\n\n**Decision Trees:** Extremely straightforward, often just as accurate as an SVM but (usually) way faster.  The launch point for more sophisticated methods, like random forests and boosting.\n\n###Lesson 5: Datasets and Questions\nBehind any great machine learning project is a great dataset that the algorithm can learn from.  We were inspired by a treasure trove of email and financial data from the Enron corporation, which would normally be strictly confidential but became public when the company went bankrupt in a blizzard of fraud.  Follow our lead as we wrestle this dataset into a machine-learning-ready format, in anticipation of trying to predict cases of fraud.\n\n###Lesson 6 and 7: Regressions and Outliers\nRegressions are some of the most widely used machine learning algorithms, and rightly share prominence with classification.  What\u2019s a fast way to make mistakes in regression, though?  Have troublesome outliers in your data.  We\u2019ll tackle how to identify and clean away those pesky data points.\n\n###Lesson 8: Unsupervised Learning\n\n**K-Means Clustering:** The flagship algorithm when you don\u2019t have labeled data to work with, and a quick method for pattern-searching when approaching a dataset for the first time.\n\n###Lessons 9-12: Features, Features, Features\n\n**Feature Creation:** Taking your human intuition about the world and turning it into data that a computer can use.\n\n**Feature Selection:** Einstein said it best: make everything as simple as possible, and no simpler.  In this case, that means identifying the most important features of your data.\n\n**Principal Component Analysis:** A more sophisticated take on feature selection, and one of the crown jewels of unsupervised learning.\n\n**Feature Scaling:** Simple tricks for making sure your data and your algorithm play nicely together.\nLearning from Text: More information is in text than any other format, and there are some effective but simple tools for extracting that information.\n\n###Lessons 13-14: Validation and Evaluation\n\n**Training/testing data split:** How do you know that what you\u2019re doing is working?  You don\u2019t, unless you validate.  The train-test split is simple to do, and the gold standard for understanding your results.\n\n**Cross-validation:** Take the training/testing split and put it on steroids.  Validate your machine learning results like a pro.\n\n**Precision, recall, and F1 score:**  After all this data-driven work, quantify your results with metrics tailored to what is most important to you.\n \n###Lesson 15: Wrapping it all Up\nWe take a step back and review what we\u2019ve learned, and how it all fits together.  \n\n###Projects\n\nMini-project at the end of each lesson\n\n**Final project:** searching for signs of corporate fraud in Enron data", "name": "Intro to Machine Learning", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-machine-learning--ud120?utm_medium=referral&utm_campaign=api", "shortDescription": "This class will teach you the end-to-end process of investigating data through a machine learning lens, and you'll apply what you've learned to a real-world data set.", "description": "Machine Learning is a first-class ticket to the most exciting careers in data analysis today. As data sources proliferate along with the computing power to process them, going straight to the data is one of the most straightforward ways to quickly gain insights and make predictions.  \n\nMachine learning brings together computer science and statistics to harness that predictive power. It\u2019s a must-have skill for all aspiring data analysts and data scientists, or anyone else who wants to wrestle all that raw data into refined trends and predictions.\n\nThis is a class that will teach you the end-to-end process of investigating data through a machine learning lens. It will teach you how to extract and identify useful features that best represent your data, a few of the most important machine learning algorithms, and how to evaluate the performance of your machine learning algorithms.\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd002\">Data Analyst</a> Nanodegree."}, {"lectures": "### Lesson 1\nWhat is \"Big Data\"? The dimensions of Big Data. Scaling problems.  HDFS and the Hadoop ecosystem.\n\n### Lesson 2\nThe basics of HDFS, MapReduce and Hadoop cluster.\n\n### Lesson 3\nWriting MapReduce programs to answer questions about data.\n\n### Lesson 4\nMapReduce design patterns.\n\n### Final Project\nAnswering questions about big sales data and analyzing  large website logs.", "name": "Intro to Hadoop and MapReduce", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-hadoop-and-mapreduce--ud617?utm_medium=referral&utm_campaign=api", "shortDescription": "In this short course, learn the fundamentals of MapReduce and Apache Hadoop to start making sense of Big Data in the real world!", "description": "The Apache\u2122 Hadoop\u00ae project develops open-source software for reliable, scalable, distributed computing. Learn the fundamental principles behind it, and how you can use its power to make sense of your Big Data."}, {"lectures": "###Lesson 1\nJoin instructor Karthik Ramasamy and the first Udacity-Twitter Storm Hackathon to cover the motivation and practice of real-time, distributed, fault-tolerant data processing.  Dive into basic Storm Topologies by linking to a real-time d3 Word Cloud Visualization using Redis, Flask, and d3. \n\n###Lesson 2\nExplore Storm basics by programming Bolts, linking Spouts, and finally connecting to the live Twitter API to process real-time tweets.  Explore open source components by connecting a Rolling Count Bolt to your topology to visualize Rolling Top Tweeted Words.\n\n###Lesson 3\nGo beyond Storm basics by exploring multi-language capabilities to download and parse real-time Tweeted URLs in Python using Beautiful Soup.  Integrate complex open source bolts to calculate Top-N words to visualize real-time Top-N Hashtags.  Finally, use stream grouping concepts to easily create streaming join to connect and dynamically process multiple streams.\n\n###Lesson 4\nWork on your final project and we cover additional questions and topics brought up by Hackathon participants.  Explore Vagrant, VirtualBox, Redis, Flask, and d3 further if you are interested!\n\n###Final Project: Construct a Storm Topology\nDesign a Storm Topology and new bolt that uses streaming joins to dynamically calculate Top-N Hashtags and display real-time tweets that contain trending Top Hashtags.  Post your visualization to the forum and tweet them to your Twitter followers.\n\n###Project Extensions\nUse additional features of the real-time Twitter sample stream or use any data source to drive your real-time d3 visualization.", "name": "Real-Time Analytics with Apache Storm", "language": "en", "homepage": "https://www.udacity.com/course/real-time-analytics-with-apache-storm--ud381?utm_medium=referral&utm_campaign=api", "shortDescription": "The world is trending in real time! Learn Apache Storm, taught by Twitter, to scalably analyze real-time tweets and drive d3 visualizations. Storm is free, open and fun!", "description": "The world is trending in real time!  Learn from Twitter to scalably process tweets, or any big data stream, in real-time to drive d3 visualizations using Apache Storm, the \u201cHadoop of Real Time.\u201d  Storm is free, open source, and fun to use!  Learn from Karthik Ramasamy, Technical Lead of Storm@Twitter, about the distributed, fault-tolerant, and flexible technology used to power Twitter\u2019s real-time data flow pipeline.  Twitter open sourced Storm in 2011, and it graduated to a top-level Apache project in September, 2014.  \n\nStarting from basic distributed concepts presented during our first Udacity-Twitter Storm Hackathon, link Storm concepts to Storm syntax to scalably drive Word Cloud visualizations with Vagrant, Ubuntu, Maven, Flask, Redis, and d3.  Link to the public Twitter gardenhose stream to process live tweets, parse embedded URLs, and calculate Top worldwide hashtags.  Extend beyond Storm basics by exploring multi-language capabilities in Python, integrate open source components, and implement real-time streaming joins.\n\nIn your final project, follow real-time trending topics by implementing the data pipeline to visualize only tweets that contain Top worldwide hashtags.  Extend your project by exploring the Twitter API, or any data source, alongside Hackathon participants as they design their own ideas, receive feedback from Karthik, and open source a final project calculating real-time tweet sentiment and geolocation to drive a U.S. Map."}, {"lectures": "### Lesson 1: Introduction to Data Science\n\n- Introduction to Data Science\n- What is a Data Scientist\n- Pi-Chaun (Data Scientist @ Google): What is Data Science?\n- Gabor (Data Scientist @ Twitter): What is Data Science?\n- Problems Solved by Data Science \n- Pandas\n- Dataframes\n- Create a New Dataframe\n\n### Lesson 2: Data Wrangling \n\n- What is Data Wrangling?\n- Acquiring Data\n- Common Data Formats\n- What are Relational Databases?\n- Aadhaar Data \n- Aadhaar Data and Relational Databases\n- Introduction to Databases Schemas\n- API\u2019s\n- Data in JSON Format\n- How to Access an API efficiently \n- Missing Values\n- Easy Imputation\n- Impute using Linear Regression\n- Tip of the Imputation Iceberg\n\n### Lesson 3: Data Analysis\n\n- Statistical Rigor\n- Kurt (Data Scientist @ Twitter) - Why is Stats Useful?\n- Introduction to Normal Distribution\n- T Test\n- Welch T Test\n- Non-Parametric Tests\n- Non-Normal Data\n- Stats vs. Machine Learning\n- Different Types of Machine Learning\n- Prediction with Regression \n- Cost Function\n- How to Minimize Cost Function\n- Coefficients of Determination\n\n### Lesson 4: Data Visualization\n\n- Effective Information Visualization\n- Napoleon's March on Russia\n- Don (Principal Data Scientist @ AT&T): Communicating Findings\n- Rishiraj (Principal Data Scientist @ AT&T): Communicating Findings Well\n- Visual Encodings\n- Perception of Visual Cues\n- Plotting in Python\n- Data Scales\n- Visualizing Time Series Data\n\n### Lesson 5: MapReduce\n\n- Big Data and MapReduce\n- Basics of MapReduce\n- Mapper\n- Reducer\n- MapReduce with Aadhaar Data\n- MapReduce with Subway Data", "name": "Intro to Data Science", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-data-science--ud359?utm_medium=referral&utm_campaign=api", "shortDescription": "What does a data scientist do? In this course, we will survey the main topics in data science so you can understand the skills that are needed to become a data scientist!", "description": "The Introduction to Data Science class will survey the foundational topics in data science, namely:\n\n*   Data Manipulation\n*   Data Analysis with Statistics and Machine Learning\n*   Data Communication with Information Visualization\n*   Data at Scale -- Working with Big Data  \n\n<br />\nThe class will focus on breadth and present the topics briefly instead of focusing on a single topic in depth. This will give you the opportunity to sample and apply the basic techniques of data science.\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd002\">Data Analyst</a> Nanodegree."}, {"lectures": "###Lesson 1: How the Web Works (2.5 hours)\nIn this first lesson, you will learn basic concepts regarding the internet, browsers, HTML, and how all those elements fit together. You\u2019ll start using HTML (HyperText Markup Language) to format content for webpages. Then you\u2019ll get to see the mechanics of how the web works: HyperText Transfer Protocol (HTTP) via GET and POST requests. In the first problem set, you will get a simple website up and running with the Google App Engine platform. \n\n###Lesson 2: Forms and Input (4 hours)\nIn this second lesson you will learn about forms, a very common way to obtain input from users. You will learn how to get and process user input from webpages using Google App Engine to get a live form up and running. By the end of this lesson, you will know how to validate user input and securely obtain data from users.\n\n\n###Lesson 3: Databases (6 hours)\nYou learned about getting all sorts of information from users in the previous lesson, but what do you do with it once it\u2019s in your hands? You store it! In this third lesson, Steve will dive in and teach you what you need to know about databases, the final piece you need to start setting your blog in motion! You will learn about various database technologies, SQL, and the Google App Engine Datastore.\n\n###Lesson 4: User Accounts and Security (6 hours)\nIn this fourth lesson, you will learn the fundamentals of authentication and security, which are very relevant topics in almost any web application built today. We\u2019ll start by examining how websites use cookies to authenticate users and how we can manage cookies from the backend of a web application. You will implement a login system for your blog and learn how to use hashing to securely read and transmit user passwords.\n\n###Lesson 5: APIs (4.5 hours)\nUp until now, your programs have generated HTML that a browser can use to render a web page for the user. In the digital world, however, applications and websites communicate not only with people, but also with other applications and websites. By the end of this lesson, your blog will communicate with humans as well as with other computers. Your web application can generate data in formats such as XML and JSON that other computers can access through an API, or application programming interface. Those computers, in turn, can build websites or services that interact with your data. You\u2019ll first learn how to use APIs, and then build web applications as services so that other computers can glean data from your application. We will look at both XML and JSON by investigating how to read them, how to interpret them, and how to manipulate them. \n\n###Lesson 6: Caching (3.5 hours)\nIn this lesson, we will explore how to prepare your applications to run at a large scale. So far, we've written 'toy' applications for just one or two users. If we want to start writing apps for thousands or, perhaps, even millions of users, then obviously we'll need to think about scaling. When we talk about scaling, this may mean running your application on multiple machines, storing huge amounts of data, or consuming large amounts of bandwidth. In particular, we will learn about caching, including the uses of caching, why you might want to cache, and specific caching implementations such as Memcached. \n\n###Lesson 7: Scaling Up (2.5 hours)\nIn this last lesson of the course, Steve has prepared a relaxing, story-time segment. You will hear web development anecdotes from people who have been through it all. You will enjoy interviews with engineer Neil Williams from Reddit, and engineer Chris Chew from Udacity. They will share their experiences on working with web applications, and you will see how all that you\u2019ve learned in this course comes into the big picture.\n\n###Final Project (8 hours)\nFor the final project, you will build a fully functional wiki - a website that allows any page to be edited. The wiki you will be able to build by the end of the course will feature the following: \n\n- Easily create new pages of the site by using the wiki edit capabilities. You should be able to enter a non-existent URL, redirect to an edit page, and create a new page from there. \n- Have user accounts so that logged-in users only will have edit privileges. \n- Use caching functionality.\n- Have a history section which displays the different wiki versions that have existed.", "name": "Web Development", "language": "en", "homepage": "https://www.udacity.com/course/web-development--cs253?utm_medium=referral&utm_campaign=api", "shortDescription": "Starting from the basics of how the web works, you will learn everything you need to know to build your own blog and scale it to support large numbers of users.", "description": "Try to picture yourself sitting down with your computer, ready to start developing a fully functional web application for the first time, available online for millions to use. \u201cWhere should I even begin? How long is this going to take me? Am I making any mistakes along the way?\u201d The questions may leave you with an uneasy feeling that you will learn many lessons the hard way. \n\nIn this intermediate course, Steve Huffman will teach you everything he wished he knew when he started building <a href=\"http://www.reddit.com/\" target=\"_blank\">Reddit</a> and, more recently, <a href=\"http://www.hipmunk.com/\" target=\"_blank\">Hipmunk</a>, as a lead engineer. Starting from the basics of how the web works, this course will walk you through core web development concepts such as how internet and browsers fit together, form validations, databases, APIs, integrating with other websites, scaling issues, and more; all of which form part of the knowledge it takes to build a web application of your own."}, {"lectures": "### Lesson 1: Scopes and Closures\nWe\u2019ll start by discussing JavaScript\u2019s functional variable scoping features, including lexical scopes (variable availability as you write your code) and dynamics scopes (variable availability as your code actively runs). We\u2019ll then discuss closures, an often misunderstood but incredibly useful feature available in only a handful of languages, including JavaScript.\n\n### Lesson 2: The Keyword \u201cthis\u201d\nYou\u2019ll start your dive into JavaScript object-oriented features by first discovering the parameter \u201cthis\u201d. You\u2019ll learn how the value of \u201cthis\u201d is determined within various code structures and why it might be a lot easier to think of \u201cthis\u201d as a parameter rather than a keyword.\n\n### Lesson 3: Prototype Delegation\nYou\u2019re probably using one of JavaScript\u2019s inheritance models already: prototype delegation! In this lesson you\u2019ll learn more about this unique feature of JavaScript, how JavaScript uses this feature internally and how you can take advantage of it to maximize your application\u2019s memory footprint.\n\n### Lesson 4: Code Reuse\nThere are numerous ways to write concise, maintainable and reusable code in JavaScript and you\u2019ll practice a number of them in this lesson. We\u2019ll start writing a library using basic functions and learn the decorator pattern. Then, we\u2019ll refactor this library into the functional, prototypal and pseudoclassical inheritance models. Finally, we\u2019ll explore sub-classing -- coding objects that directly inherit from objects we\u2019ve previously defined.", "name": "Object-Oriented JavaScript", "language": "en", "homepage": "https://www.udacity.com/course/object-oriented-javascript--ud015?utm_medium=referral&utm_campaign=api", "shortDescription": "Build a variety of JavaScript objects and explore how their inheritance models affect your app's in-memory model. Gain simplicity and modularity in your own code.", "description": "Have you been dabbling with JavaScript but find your files keep turning into a mess of spaghetti code? Do you find yourself copying and pasting lines of code over and over throughout your application? Surely there\u2019s a better way, right? \n\nYes, there is a better way -- object-oriented programming will allow you to build websites using reusable blocks of code known as libraries, similar to using bricks to build a house. This course is designed to teach web developers how to utilize the various object-oriented programming features within JavaScript, and more importantly, how to write reusable and maintainable libraries that will make your life easier."}, {"lectures": "You\u2019ll learn how the Canvas 2D API works and how to use it to create interesting applications. Each sample project will expose you to different aspects of HTML5 Canvas that you can use to make your own applications.\n\n### Lesson 1: HTML5 Canvas Basics\n\nIn this lesson, we\u2019ll discuss what the Canvas is, how it affects graphics in the browser and what makes it truly awesome. We\u2019ll make compositions with text and images (e.g. memes) as we learn the API.\n\n### Lesson 2: From Pixels to Animation\n\nIn this lesson, we\u2019ll learn about how images are stored by the Canvas2D context, how to modify them on a pixel level by applying various effects and filters, and how to create animations.", "name": "HTML5 Canvas", "language": "en", "homepage": "https://www.udacity.com/course/html5-canvas--ud292?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how you can use HTML5 Canvas to create and modify images or even interactive animations.", "description": "Canvas is an HTML5 element which gives you drawable surface inside your web pages you can control with JavaScript. Powerful enough to use for compositing images and even creating games.\n\nIn this course, through several sample projects, you\u2019ll learn how to use the canvas; how to make compositions using shapes, images, and text; how to create effects and filters on images and how to create animations."}, {"lectures": "In this course, you will learn how to use jQuery to select and navigate to DOM elements within your page, how to manipulate DOM elements by altering attributes, how to dynamically change content and how to add/remove DOM elements.\n\nMost importantly, you'll practice making sense of jQuery's documentation so that you'll be able to go beyond what you learn here and take advantage of jQuery's full suite of features!\n\n### Lesson 1: the DOM, $ and Selectors\n\n* The jQuery Object ($)\n* Basic DOM Structure\n* Selectors\n* Filters\n\n### Lesson 2: DOM Manipulation\n\n* Reading jQuery Documentation\n* Accessing HTML Attributes and Content\n* Modifying HTML Attributes and Content\n* Adding and Removing DOM Elements\n* Iterating with .each()\n* Using jQuery to run on DOM ready", "name": "Intro to jQuery", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-jquery--ud245?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to access and modify the DOM with ease using jQuery!", "description": "jQuery is the most popular JavaScript library today, in use by over 60% of the top 100,000 most visited websites. This course will teach you how to use jQuery\u2019s core features - DOM element selections, traversal and manipulation.\n\nYou'll also learn how to read and make sense of jQuery's documentation, making it easy for you to go beyond the methods taught in this class and take advantage of jQuery's full array of features!\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd001\">Front-End Web Developer</a> Nanodegree."}, {"lectures": "###Inspiration\n\n* What is AJAX?\n* Why use an API?\n* How can you identify AJAX requests in existing websites?\n\n###Perspiration\n\n* Clone the Move Planner repository\n* Implement the Google Streetview API\n* Implement the NY Times API\n* Error handling normal AJAX requests\n* Implement the Wikipedia API\n* Error handling JSON-P requests\n\n###Meditation\n\n* What did you learn?\n* How else can you apply AJAX to make speedy page loads?\n* Go customize!", "name": "Intro to AJAX", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-ajax--ud110?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to perform asynchronous requests as you build a web app with data from Google Street View, the New York Times and Wikipedia!", "description": "In this course you will learn how to make asynchronous requests with JavaScript (using jQuery\u2019s AJAX functionality), and gain a better understanding of what\u2019s actually happening when you do so. You will also learn how to use data APIs so you can take advantage of freely accessible data in your applications, including photo results, news articles and up-to-date data about the world around us.\n\nAs part of the course, you\u2019ll be building a web app that will help people learn about a place where they want to move! Your app will query the Google Streetview, Wikipedia and New York Times APIs!\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd001\">Front-End Web Developer</a> Nanodegree."}, {"lectures": "### Lesson 1: Design Layouts For Your Android App\nTake your hand drawn app designs and lay them out on the phone screen. In this lesson you\u2019ll learn the XML markup language used to lay out Android applications. You\u2019ll create views, the basic building block of Android layouts, that display text and images. Then you\u2019ll position your text and images on these screens. This highly interactive lesson encourages experimentation through coding challenges in Udacity\u2019s XML Visualizer.\n\n### Practice Set 1\nCreate a birthday card application for your phone. You\u2019ll start by installing Android Studio, a program used by professional developers to make Android applications. You\u2019ll then transfer a simple application you create from your computer to your phone. Following that, you\u2019ll take all the concepts you learned in Lesson 1 to build your birthday card app, and install it on your phone for your friends and family to see.\n\n### Lesson 2: Create Interactive Apps with Java\nHarness the power of Java to create an interactive coffee ordering app! You\u2019ll start by writing simple statements in Java that add interactivity to your app. You\u2019ll then incorporate buttons to trigger events. You\u2019ll finally use a fundamental concept in programming, a variable, to keep track of all the coffee drinks ordered.\n\n### Practice Set 2\nReinforce the skills learned in Lesson 2 by creating a basketball score tracker. The first part of the practice set will solidify how to write and use variables before creating your basketball score tracker app.\n\n### Lesson 3: Work with the Android Framework and Control Flow\nTake a deeper dive into the Android Framework to complete the Just Java coffee ordering app! You\u2019ll see in more detail how Android works behind the scenes and take your first steps towards learning Object Oriented Programming. You\u2019ll add the ability to add toppings to your coffee, and show a detailed order summary when the customer purchases a coffee.", "name": "Android App Development for Beginners", "language": "en", "homepage": "https://www.udacity.com/course/android-app-development-for-beginners--ud837?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the basics of Android and Java programming, and take the first step on your journey to becoming an Android developer!", "description": "Learn the basics of Android and Java programming, and take the first step on your journey to becoming an Android developer! \n\nThis course is designed for students who are new to programming, and want to learn how to build Android apps. You don\u2019t need any programming experience to take this course. If you\u2019ve been using a smartphone to surf the web and chat with friends, then you\u2019re our perfect target student! \n\nBy the end of the course, you\u2019ll build two simple (but powerful) apps that you can share with your friends. We also hope that, by the end of the course, you'll learn enough to decide how best to continue your journey as an Android app developer, if you're interesting in pursuing such a path."}, {"lectures": "### Lesson 1: Product Quality \nOverview of product quality standards, and an introduction to the goals and structure of this course. \n\n### Lesson 2: Integration Points and Error Cases\nIdentify and resolve integration points, including offline/server integration, and validate user input in the Sunshine app. \n\n### Lesson 3: Accessibility and Localization\nExpand the audience for your app by making it accessible and easily localized. \n\n### Lesson 4: Libraries\nUse libraries to handle images, and allow users to personalize their Sunshine experience with custom icons.\n\n### Lesson 5: Google Cloud Messaging\nImplement a message receiver, and learn how to send messages to Sunshine using the Google Cloud Messaging interface.  \n\n### Lesson 6: Material Design\nApply material design principles to Sunshine's activity transitions, keylines and layouts. \n\n### Lesson 7: Building a Total Experience\nBuild and implement resizable widgets and immersive wallpaper images. \n\n### Lesson 8: Performance \nUse profiling tools in Android Studio to identify performance leaks.\n\n### Final Project\nYou will productionize two apps, taking them from a functional state to a production-ready state.This will involve finding and handling error cases, adding accessibility features, and adding a library.", "name": "Advanced Android App Development", "language": "en", "homepage": "https://www.udacity.com/course/advanced-android-app-development--ud855?utm_medium=referral&utm_campaign=api", "shortDescription": "Make your app production-ready by applying advanced features like library integration, material design, widgets, receiving cloud messages, and more!", "description": "This course will guide you through the process of productionizing an app, using Sunshine, the weather app we built in <a href=\"https://www.udacity.com/course/ud853\" target=\"_blank\">Developing Android Apps</a>. Following Android's <a href=\"http://developer.android.com/distribute/essentials/quality/core.html\" target=\"_blank\">Core App Quality Guidelines</a>, we'll identify the production criteria that still needs to be implemented, then tackle each problem until Sunshine is ready to publish on the Google Play Store. In the process, we'll introduce you to a host of tools and concepts, including: material design approaches, image-handling, performance profiling, and more!"}, {"lectures": "### Lesson 1: Android Design Fundamentals\nUnderstand and apply the fundamentals of Android design to your app, and experiment with app structures, common navigation patterns and themes. \n\n### Lesson 2: Surfaces\nUnderstand how to use surfaces to structure the hierarchy and interaction of elements in an app.\n\n\n### Lesson 3: Bold Graphic Design\nUnderstand and apply branding guidelines -- including key lines, metrics, fonts, typographic scale, color palette and themes/styles.  \n\n### Lesson 4: Meaningful Motion\nUnderstand the use of motion in apps, how to use transitions to change app states and properly choreograph the motion in an app. \n\n### Lesson 5: Adaptive Design\nUnderstand how to refine and test your designs on for use on multiple form factors.", "name": "Android Design for Developers", "language": "en", "homepage": "https://www.udacity.com/course/android-design-for-developers--ud862?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn and apply the material design principles that define Android's visual language to your apps.", "description": "In this course, you'll learn how to apply the material design principles that define Android's visual language to your apps. We'll start by walking you through Android design fundamentals, then we'll show you how to apply this knowledge to transform design elements of sample apps. By the end of the course, you'll understand how to create and use material design elements, surfaces, transitions and graphics in your app, across multiple form factors."}, {"lectures": "### Introduction \nOverview of the course structure and goals, and introduction to the sample app. \n\n### Wearables \n#### Part 1: Notification Sync\n#### Part 2: Watch App\n#### Part 3: Watch Face \nHow to design and extend wearable apps, and build a watch face for the Sunshine app. \n#### Wearables Project\nDesign and extend the Sunshine app for a wearable device. \n\n### Living Room \n#### Part 1: Google Cast for Chromecast and TV\n#### Part 2: Going Deeper with Android TV \n#### Part 3: Gaming with Android TV \nOverview of Android TV platform, and Google Cast for Chromecast and TV. \n\n### Auto  \n#### Part 1 - Messaging App\n#### Part 2 - Media App\nExtend and test your apps for Auto.", "name": "Android Ubiquitous Computing", "language": "en", "homepage": "https://www.udacity.com/course/android-ubiquitous-computing--ud875?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to extend your app with Android Wear, Google Cast, Android TV and Android Auto.", "description": "Ubiquitous Computing is just a fancy phrase for technology that's accessible to the user at any time wherever they happen to be while staying relevant and unobtrusive. Until recently, reaching your user in all these new places often meant you had to build your own hardware, libraries, and infrastructure. Now you can take advantage of Google platforms to extend your app without having to reinvent the wheel.\n\nThe material in this course will give you the conceptual knowledge and expertise to extend your app with Android Wear, Google Cast, Android TV, and Android Auto."}, {"lectures": "### Introduction\nOverview of Google Services and an introduction to the goals and structure of the course.\n\n### Location and Context \n\n#### Part 1 - Getting Started\nLearn about Location Services and Fused Location Provider, then create an app to get the current location. \n#### Part 2 - Going Deeper\nLearn about continuous updates to your app, and then extend this to understand different user activities.\n#### Part 3 - Advanced Topics: Geofencing \nLearn about geofencing, how it works, and how to build and monitor them.\n\n### Analytics/Tag Manager\nWhere in the world are people using your app? Which activities do they use most? How do they navigate through your app? Take this course to learn how to add code to your mobile app to send usage data to Google Analytics, to get answers to questions like these.\n\nThis course also covers how to use Google Tag Manager to send updated information to your app without needing to redeploy the APK. The final lesson explains how to use Tag Manager to manage all your Google Analytics tags.\n\n#### Part 1 - Getting Started with Analytics\nGet a Google Analytics account ID, and update your app to track all screen views. \n\n#### Part 1 - Beyond Auto Activity Tracking\nSend tracking data for events, and track how your users move through the shopping process.\n\n#### Part 3 - Intro to Tag Manager \nUse Tag Manager to update values in your app without having to redeploy any code. Cool, huh?\n\n#### Part 4 - Integrating Google Analytics and Tag Manager \nUse Tag Manager to organize the Analytics tags in your app.\n\n### AdMob\n#### Part 1 - Using Ads to Monetize Your App \nIntroduction to models to make money from an app and Google AdMob.\n\n#### Part 2 - Displaying Ads in an App \nCreate code to display Banner and Interstitial ads in an app.\n\n#### Part 3 - Using Real Ads\nHow to go from a test app to an app that shows real ads.\n\n### Mapping \nMaps. Everybody uses them, and many people love them. Maps on mobile devices have changed the world over the last few years. Learn how to build a rich map experience in this section.\n\n#### Part 1 - Getting Started\nAdd maps to your app, understand the different map types, and learn how to use the Google Developers console to get an API key. Even create a map that flies around the world!\n\n#### Part 2 - Going Deeper \nUnderstand the Camera, and how it's used to project a map. Learn about zooming to different locations, and changing the camera tilt and direction. Learn about Markers, and how to place them on a map, as well as drawing shapes that are correctly geographically projected -- including lines, polylines and circles.\n\n#### Part 3 - Advanced Topics: Street View\nLearn about StreetView and how you can look at various locations around the globe as if you were there. Build a virtual hike down the Grand Canyon, and learn how to modify this to make it perfect for your app.\n\n### Identity \nLearn how to use Google\u2019s Identity Platform to allow users to sign-in using their Google credentials, and access the data that they grant you permission to access. \n\n#### Part 1 - Getting Started \nBuild a basic Android App that signs your users in with Profile access. From this, you can get metadata about your users such as their full name.\n\n####Part 2 - Going Deeper \nLearn about the Google design styles for sign-in buttons, and how to get them to use in your own app. Customize your app with these styles, and learn about different scopes, including email scope, which only allows apps access to the signed-in user\u2019s email address for identification.", "name": "Google Play Services", "language": "en", "homepage": "https://www.udacity.com/course/google-play-services--ud876?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to access Google\u2019s APIs -- including Location, Maps, Analytics and Advertising -- and build better apps!", "description": "Google offers APIs that allow you to access many of its popular services, including Location, Maps, Analytics, Advertising, Identity, and more. In this course, you\u2019ll learn how to access these services, and build better apps!"}, {"lectures": "### Lesson 1: Gradle Fundamentals\nLearn the syntax and semantics of Gradle build scripts, and understand the lifecycle of a Gradle build.\n\n### Lesson 2: Gradle for Java\nUnderstand the Gradle Java plugin, build and test Java projects, and manage dependencies.\n\n### Lesson 3: Gradle for Android\nDiscover the Gradle integration with Android Studio, and build an app with multiple product flavors.\n\n### Lesson 4: Advanced Android Builds\nCreate Android libraries, and use advanced features of the Android Gradle Plugin to configure signing, obfuscation, and testing.\n\n### Final Project\nBuild and test a joke telling app with a free ad-supported version and a paid version. As a bonus, deploy a Google Cloud Messaging backend to supply the jokes.", "name": "Gradle for Android and Java", "language": "en", "homepage": "https://www.udacity.com/course/gradle-for-android-and-java--ud867?utm_medium=referral&utm_campaign=api", "shortDescription": "Build bigger and better Android and Java apps using the Gradle build tool.", "description": "This course reveals the magic that happens after you hit the \"Run\" button in Android Studio. You'll learn how the Gradle build tool compiles and packages your app, and you'll customize the build process. You'll learn to configure free vs paid app flavors, create and integrate Android libraries, test your app, and prepare your app for the Play Store."}, {"lectures": "### Part I: Fundamentals of AI  \n- Overview of AI\n- Statistics, Uncertainty, and Bayes networks\n- Machine Learning\n- Logic and Planning\n- Markov Decision Processes and Reinforcement Learning\n- Hidden Markov Models and Filters\n- Adversarial and Advanced Planning\n\n### Part II: Applications of AI  \n- Image Processing and Computer Vision\n- Robotics and robot motion planning\n- Natural Language Processing and Information Retrieval", "name": "Intro to Artificial Intelligence", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-artificial-intelligence--cs271?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will introduce you to the basics of AI. Topics include machine learning, probabilistic reasoning, robotics, computer vision, and natural language processing.", "description": "Artificial Intelligence (AI) is a field that has a long history but is still constantly and actively growing and changing. In this course, you\u2019ll learn the basics of modern AI as well as some of the representative applications of AI. Along the way, we also hope to excite you about the numerous applications and huge possibilities in the field of AI, which continues to expand human capability beyond our imagination."}, {"lectures": "### Lesson 1: What is EDA? (1 hour)\nWe'll start by learn about what exploratory data analysis (EDA) is and why it is important. You'll meet the amazing instructors for the course and find out about the course structure and final project.\n\n### Lesson 2: R Basics (3 hours)\nEDA, which comes before formal hypothesis testing and modeling, makes use of visual methods to analyze and summarize data sets. R will be our tool for generating those visuals and conducting analyses. In this lesson, we will install RStudio and packages, learn the layout and basic commands of R, practice writing basic R scripts, and inspect data sets.\n\n### Lesson 3: Explore One Variable (4 hours)\nWe perform EDA to understand the distribution of a variable and to check for anomalies and outliers. Learn how to quantify and visualize individual variables within a data set as we begin to make sense of a pseudo-data set of Facebook users. While the data set does not contain real user data, it does contain a wealth of information. Through the lesson, we will create histograms and boxplots, transform variables, and examine tradeoffs in visualizations.\n\n### Problem Set 3 (2 hours)\n\n### Lesson 4: Explore Two Variables (4 hours)\nEDA allows us to identify the most important variables and relationships within a data set before building predictive models. In this lesson, we will learn techniques for exploring the relationship between any two variables in a data set. We'll create scatter plots, calculate correlations, and investigate conditional means.\n\n### Problem Set 4 (2 hours)\n\n### Lesson 5: Explore Many Variables (4 hours)\nData sets can be complex. In this lesson, we will learn powerful methods and visualizations for examining relationships among multiple variables. We'll learn how to reshape data frames and how to use aesthetics like color and shape to uncover more information. Extending our knowledge of previous plots, we'll continue to build intuition around the Facebook data set and explore some new data sets as well.\n\n### Problem Set 5 (2 hours)\n\n### Lesson 6: Diamonds and Price Predictions (2 hours)\nInvestigate the diamonds data set alongside Facebook Data Scientist, Solomon Messing. He'll recap many of the strategies covered in the course and show how predictive modeling can allow us to determine a good price for a diamond. As a final project, you will create your own exploratory data analysis on a data set of your choice.\n\n### Final Project (10+ hours)\nYou've explored simulated Facebook user data and the diamonds data set. Now, it's your turn to conduct your own exploratory data analysis. Choose one data set to explore (one provided by Udacity or your own) and create a RMD file that uncovers the patterns, anomalies and relationships of the data set.", "name": "Data Analysis with R", "language": "en", "homepage": "https://www.udacity.com/course/data-analysis-with-r--ud651?utm_medium=referral&utm_campaign=api", "shortDescription": "Data is everywhere and so much of it is unexplored. Learn how to investigate and summarize data sets using R and eventually create your own analysis.", "description": "Exploratory data analysis is an approach for summarizing and visualizing the important characteristics of a data set. Promoted by [John Tukey](http://en.wikipedia.org/wiki/John_Tukey), exploratory data analysis focuses on exploring data to understand the data\u2019s underlying structure and variables, to develop intuition about the data set, to consider how that data set came into existence, and to decide how it can be investigated with more formal statistical methods.\n\nIf you're interested in supplemental reading material for the course check out the <a href=\"http://www.amazon.com/gp/product/0201076160/ref=as_li_ss_il?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201076160&linkCode=as2&tag=udacity-20\">Exploratory Data Analysis</a> book. (Not Required)\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd002\">Data Analyst</a> Nanodegree."}, {"lectures": "### Overview\nThe goal of this course is to help you build better apps by helping you become a design-minded developer. In Lessons 1 and 2, you will learn widely applicable design principles and techniques like high-level UX planning and user-centered design.\n\nIn Lessons 3 and 4, you will focus on design ideas specific to mobile/Android development. Mobile platforms all come with a unique set of constraints and opportunities and this lesson will help you respect those constraints while taking advantage of the opportunities. \n\n### Lessons\n\n#### Lesson 1: What is User Experience?\nIn this lesson you will think about User Experience from the highest level. You will break down complex apps into a small number of simple steps and think about their big picture flow (including ones that you have worked on in the past or are currently working on). \n\n*Topics covered:*\n\n* What is UX?\n* UI vs. UX\n* High-level planning\n* Low-fi wireframing and prototyping\n* Two concrete app improvements to implement now\n\n#### Lesson 2: User-Centered Design\nIn this lesson you will learn how to design apps that your users will love. You will learn the importance of user-centered design, what happens when you design for everyone/no one (spoiler alert: it\u2019s generally bad), and how to effectively use tools like personas and use cases to ensure a baseline level of quality for anything you build. You will also learn a bit about how to use cheap and easy user research techniques to make well-informed design decisions. \n\n*Topics covered:*\n\n* The perils of ignoring your user\n* How to create effective personas and use cases\n* Low cost user research\n* How to use personas and use cases to inform feature lists\n\n#### Lesson 3: Designing for Mobile Constraints\n\nMobile design and development come with constraints and opportunities. This lesson is about the constraints. You will learn what constraints are inherent to mobile development and how to use design tools and techniques to ensure your app actually respects those constraints. \n\n*Topics covered:*\n\n* The 5 big constraints: limited data, finite battery, hand-held usage, divided user attention, and small screens.\n* The implications of these constraints and what happens when you get them wrong.\n* Advanced wireframing\n\n#### Lesson 4: Designing for Android Delight\n\nAt this point, you will already know how to make a solid mobile app that users like. But like isn\u2019t enough! In order to be really successful, your app needs to be *loved*. In this lesson, you\u2019ll learn how to leverage the power of Android by using device sensors and Google APIs to understand your user\u2019s context.\n\n*Topics covered:*\n\n* Android sensors\n* The importance of contextual apps\n* The \u201ccomponents\u201d of context\n* Android APIs (Google Play Services)\n\n### Final Project\nIn your final project, you will create high/mid-level design specifications for your own incredible Android app. You'll begin work on this project in the Assignments for Lesson 2, and continue working on it until the end of the course. \n\nWhen it's finished, you will have the blueprint for an app that will:\n\n* Be designed for a specific target user.\n* Have an almost-perfect high level flow.\n* Avoid all major mobile pitfalls.\n* Use Android sensors and APIs to understand your user's context and deliver context-aware moments of amazement that they will love.", "name": "UX Design for Mobile Developers", "language": "en", "homepage": "https://www.udacity.com/course/ux-design-for-mobile-developers--ud849?utm_medium=referral&utm_campaign=api", "shortDescription": "This is a design course made for developers. You'll learn UX design skills which will help you make 5-star mobile apps that your users will love.", "description": "This course is optimized for the developer who is looking to efficiently learn the most important design techniques that will help them make better apps (with a focus on mobile/Android). \n\nThis is a UX design course built for current (and aspiring) mobile developers. In this short course, you'll step back from your IDE and dive into the techniques that great designers use to plan and prototype amazing apps before any code is written.\n\n####[Download Udacity's Android app](https://play.google.com/store/apps/details?id=com.udacity.android) to keep learning wherever you go!"}, {"lectures": "### Overview\nIn this class you\u2019ll learn the basics of building apps with Force.com, a part of Salesforce Platform. These apps are typically business apps: they solve organizational and logistical problems. You probably wouldn\u2019t use Salesforce to build a computer game (though you could!).\n\nThere are two ways to build apps in Force.com: with or without code. This class will only cover the non-coding, point-and-click app building interface. But don\u2019t be fooled! Building powerful apps does not require writing code. \n\nThis class contains an introductory lesson, five primary lessons where you'll be building and learning (each of which has an accompanying problem set to practice your skills), and a final project where you'll put everything together.\n\n### Lesson 0: What is Salesforce (15 mins)\nWhat **is** Salesforce Platform? What does it do? Why should I learn about it? What kind of jobs can I get after I learn how to use it?\n\nIn this lesson, you\u2019ll meet the instructors, get to know the class, and learn a bit about Salesforce in general. \n\n### Lesson 1: Creating your First App (90 minutes)\nIn this lesson you\u2019ll get acquainted with Force.com and actually build the beginnings of your first app. You\u2019ll get some experience taking a big problem (in this case, managing a music festival), breaking it into smaller parts, and representing those parts in Salesforce. As you do this, you\u2019ll learn about the basic components of a Salesforce app and add some simple (but powerful) functionality to your app. More concretely, you\u2019ll learn about:\n\n* **Salesforce Data**: Salesforce represents data as objects, fields, and records. You\u2019ll learn what these terms mean and build them into your app. \n* **Relationships**: When the pieces of your app start communicating, interesting things can happen. In this lesson you\u2019ll learn the basics of Salesforce relationship fields. \n* **Validation Rules**: If you\u2019ve ever incorrectly entered your credit card number into a website, you already know about validation rules. In this lesson, you\u2019ll learn how to build them into your app. \n* **Formulas and Summaries**: These tools let you easily keep track of quantifiable things like money spent, customers contacted, or tickets sold. In this lesson you\u2019ll learn how to build these automated calculations into your app.  \n\n### Lesson 2: Building out your Data Model (90 mins)\nBehind every powerful business app is a well-planned data model (also known as a schema). In this lesson you\u2019ll learn how to decompose a complex problem into its component pieces and then connect those pieces together with the appropriate relationship fields. The data model you build will serve as the schematic skeleton onto which you\u2019ll build dynamic functionality in later lessons. The specific topics covered are: \n\n* **One-to-Many Relationships**: These relationships let the pieces of your app talk to each other. In this lesson you\u2019ll learn how and when (and why) to use master-detail and lookup relationships in the apps you build. \n* **Many-to-Many Relationships**: You\u2019ll learn how to use a junction object to add flexibility into your data model. \n* **Customizing the User Interface**: Good apps should be easy to use! In this lesson you\u2019ll learn how to configure the layout of your app to make sure the UI is simple and intuitive.\n* **Schema Builder**: There are many ways to get things done in Salesforce. In this lesson you\u2019ll start using the schema builder to understand how your app works.\n* **Data Loading**: This is a convenient way to get lots of data onto your app at once.\n\n### Lesson 3: Visualizing your Data (45 mins) \nNo matter what kind of app you\u2019re building, you\u2019ve probably got some data that you want other people in your organization to understand quickly and easily. In this lesson you\u2019ll learn how quickly communicate information with  real-time data visualizations. Specifically, you\u2019ll learn how to make:\n\n* **Reports**: These let you gather related information into one place.  These let you gather data according to specific criteria and display it in neat rows and columns. \n* **Charts**: These let you graphically summarize the information in a report.\n* **Dashboards**: Different people want access to different information. A dashboard is a collection of charts that give specific people in your organization exactly the information that they need in real-time.\n* **Views**: Data is good, but sometimes you have too much. Views let you selectively and quickly display only the data you care about.\n\n### Lesson 4: Adding Automation (45 mins)\nIn this lesson you\u2019ll think about how to use your app to automate manual tasks. You\u2019ll learn how to use two important Salesforce tools: \n\n* **Workflows**: There are situations where a series of steps need to happen in sequence: first do this, then do that. Workflows let you automate processes like these, such as sending an email, assigning a task, or updating a field.\n* **Approval Processes**: You don\u2019t want every job to be completely automated. Sometimes you need someone to step in and say \u201cthis looks good.\u201d Approval processes add a human element to your automated tasks.\n\n### Lesson 5: Make it Social. Make it Mobile. (45 mins)\nThis is it. With a few clicks of the mouse you\u2019ll make your app social and mobile. The tools you\u2019ll use are:\n\n* **Chatter**: This will let your users collaborate on the projects and records they work on together.  \n* **Salesforce1**: That web app you\u2019ve been building this whole time? It\u2019s actually a mobile app too. You\u2019ll even learn how to quickly customize your mobile interface and add functionality for mobile productivity. \n\n### Final Project: Build your own App (2-4 hours)\nBy the time you get here, you will have already built a music festival management app. Now it\u2019s time to take your own idea and turn it into a functional web and mobile app.", "name": "Intro to Point & Click App Development", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-point-click-app-development--ud162?utm_medium=referral&utm_campaign=api", "shortDescription": "In this short class you'll build powerful apps without writing code. Great if you're an aspiring developer or someone who wants to learn what programmers do.", "description": "This class teaches you how to build powerful web and mobile apps and host them in the cloud, without writing a line of code.\n\nBy the end of this short course, you'll use the skills you've developed to conceptualize and create your own app. To get you there, your instructors Samantha and Andy will first help you build an app that could be used to manage logistics at a music festival. Though this is a very specific app use case, the skills you learn will be applicable to just about any business app you\u2019d want to develop."}, {"lectures": "###Overview\nThis course consists of 6 lessons. First one is an overview of cloud computing and the benefits of Platform as a Service. Lessons 2-5 will cover important theoretical concepts of Google App Engine and also plenty of hands-on exercises implementing what you have learned. Lesson 6 will be a short intro on an easy way to create native mobile apps that talk to your backend.\n\n###Lesson 1: Scalability Basics\nDo you know how and why server racks were invented years ago? Have you realized all of the problems that you have to solve if you will try to scale your app by yourself? Learn about a better way.\n\n###Lesson 2: Getting Started\nSet up your first App Engine project and learn how to define Cloud Endpoints. \n\nStart the course project app - Conference Central and add authentication and user profiles.\n\n###Lesson 3: Storing and Retrieving Data\nOne of the most important things you want to do in your app is storing data. In this lesson you will learn what is Google App Engine Datastore, how is it different from RDBMS and how you can use it in your applications.\n\nAdd the ability to store and retrieve user profiles and conferences to the course project app.\n\n###Lesson 4: Advanced Datastore Concepts\nLearn more about how Datastore works, including queries, filters, indexes and transactions. \n\nAdd different ways to query conferences.\n\n###Lesson 5: Advanced App Engine Topics\nThere are a lot of things you might want your application to do in background, without making the user wait, or even initiate the process. Learn about task queues and cron jobs and how you can use them to add advanced functionality to your app. You will also learn about Memcache, and get an overview of topics like Edge Caching, AppStats and other methods of optimising your apps performance.\n\nAdd a push queue, cron job and a customised Memcache entry to your app.\n\n###Lesson 6: App Engine and Mobile Apps\nYou have been using Cloud Endpoints in the app, and now it\u2019s time to see how you can use them in a mobile app. Learn how to generate native libraries for Android and iOS that can talk to your backend. You can even recompile the Android app we provide with our course, to work against your own project. How cool is that?\n\nGenerate mobile client libraries for your app.", "name": "Developing Scalable Apps with Java", "language": "en", "homepage": "https://www.udacity.com/course/developing-scalable-apps-with-java--ud859?utm_medium=referral&utm_campaign=api", "shortDescription": "You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer.", "description": "You will learn about challenges of building applications that can serve hundreds of thousands of users, and how you can prepare for them as a developer. And more importantly - you will learn how to harness the power of **App Engine** - Platform as a Service, run by Google, so you can focus on your application's features, not on managing infrastructure that runs your app. Let Google run and scale the infrastructure and do what you do best - write code! \n\nHowever, to use App Engine effectively, you have to learn how it works, and this is exactly what this course will teach! You will also learn the best practices of using <a href=\"https://cloud.google.com/products/cloud-endpoints/\" target=\"_blank\">Cloud Endpoints</a> that allow you to easily create RESTful services and make them accessible to iOS, Android and Javascript clients. They allow you to automatically generate client libraries to make wiring up the frontend easy. And there are some nifty built-in features, like denial-of-service protection and OAuth 2.0 support."}, {"lectures": "### Lesson 1: GPU Programming Model\n\nProject 1: Greyscale Conversion (for that classy touch!)\n\n### Lesson 2: GPU Hardware and Parallel Communication\n\nProject 2: Smart Blurring (miracle product for removing wrinkles!)\n\n### Lesson 3: Fundamental Parallel Algorithms\n\nProject 3: HDR Tonemapping (when 1000:1 contrast is not enough!)\n\n### Lesson 4: Using Sort and Scan\n\nProject 4: Red Eye Removal (soothing relief for bright red eyes)\n\n### Lesson 5: Optimizing GPU Programs\n\nProject 5: Accelerating Histograms (when fast isn't fast enough)\n\n### Lesson 6: Parallel Computing Patterns\n\nProject 6: Seamless Image Compositing (polar bear in the swimming pool)\n\n### Lesson 7: The Frontiers and Future of GPU Computing", "name": "Intro to Parallel Programming", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-parallel-programming--cs344?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the fundamentals of parallel computing with the GPU and the CUDA programming environment by coding a series of image processing algorithms. #filters, #cuda.", "description": "Learn the fundamentals of parallel computing with the GPU and the CUDA programming environment! In this class, you'll learn about parallel programming by coding a series of image processing algorithms, such as you might find in Photoshop or Instagram. You'll be able to program and run your assignments on high-end GPUs, even if you don't own one yourself.  \n\n**Why It\u2019s Important to Think Parallel**  \n\n[Third Pillar of Science][1]  \nLearn how scientific discovery can be accelerated by combining theory and experimentation with computing to fight cancer, prevent heart attacks, and spur new advances in robotic surgery.\n\n[1]: http://www.youtube.com/watch?v=3DbAB2ChDBw"}, {"lectures": "### Lesson 1 : Intro to Research Methods\nYou will be introduced to several statistical study methods and learn the positives and negatives of each. \n### Lesson 2 : Visualizing Data\nYou will learn how to take your data and display it to the world. You will learn to create and interpret histograms, bar charts, and frequency plots.\n### Lesson 3 : Central Tendency\nIn this lesson you will learn to compute and interpret the 3 measures of center for distributions: the mean, median, and mode.\n### Lesson 4 : Variability\nYou will learn how to quantify the spread of data using the range and standard deviation. You will also learn how to identify outliers in data sets using the concept of the interquartile range. \n### Lesson 5 : Standardizing\nYou will learn how to convert distributions into the standard normal distribution using the Z-score. You will also learn how to compute proportions using standardized distributions. \n### Lesson 6 : Normal Distribution\nYou will learn how to use normalized distributions to compute probabilities. You will also learn how to use the Z-table to look up the proportions of observations above, below, or in between values.  \n### Lesson 7 : Sampling Distributions\nYou will learn how to apply the concepts of probability and normalization to sample data sets.", "name": "Intro to Descriptive Statistics", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-descriptive-statistics--ud827?utm_medium=referral&utm_campaign=api", "shortDescription": "Intro to Descriptive Statistics will teach you the basic concepts of statistics that can be used to extract information from data.", "description": "Statistics is an important field of math that is used to analyze, interpret, and predict outcomes from data. Descriptive statistics will teach you the basic concepts used to describe data. This is a great beginner course for those interested in Data Science, Economics, Psychology, Machine Learning, Sports analytics and just about any other field."}, {"lectures": "Inferential Statistics is a continuation of the material covered in [Descriptive Statistics](https://www.udacity.com/course/ud827), and so lesson numbers follow from that course:\n\n### Lesson 8: Estimation\nYou will learn how to estimate population parameters from sample statistics using confidence intervals and estimating the effect of a treatment.\n### Lesson 9: Hypothesis Testing \nYou will learn how to use critical values to make decisions on whether or not a treatment has changed the value of a population parameter.\n### Lesson 10,11: t-tests\nYou will learn how to test the effect of a treatment or compare the difference in means for two groups when we have small sample sizes.\n### Lesson 12,13: ANOVA\nYou will learn how to test whether or not there are differences between three or more groups.\n### Lesson 14: Correlation\nYou will learn how to describe and test the strength of a relationship between two variables.\n### Lesson 15: Regression \nYou will learn how to describe the way in which changes in one variable are related to changes in a second variable.\n### Lesson 16: Chi-squared Tests\nYou will learn how to compare and test frequencies for categorical data. \n### Final Project \nYou will use the methods you have learned in this course to perform an analysis on a dataset and report your findings. You will describe the data, calculate statistics, perform inference, and make conclusions.", "name": "Intro to Inferential Statistics", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-inferential-statistics--ud201?utm_medium=referral&utm_campaign=api", "shortDescription": "Intro to Inferential Statistics will teach you how to test your hypotheses and begin to make predictions based on statistical results drawn from data!", "description": "Inferential statistics allows us to draw conclusions from data that might not be immediately obvious. This course focuses on enhancing your ability to develop hypotheses and use common tests such as t-tests, ANOVA tests, and regression to validate your claims."}, {"lectures": "###Lesson 1: Abstractions\n\n * The Princple of Abstraction\n * Hardware Resources\n * OS Functionality\n * Managing the CPU and Memory\n \n###Lesson 2: OS Structure\n\n* OS Structure Overview\n* The SPIN Approach \n* The Exokernel Approach\n* The L3 Micro-Kernel Approach\n \n###Lesson 3: Virtualization\n\n* Intro to Virtualization\n* Memory Virtualization\n* CPU and Device Virtualization\n \n###Lesson 4: Parallelism\n\n* Shared Memory Machines\n* Synchronization\n* Communication\n* Lightweight RPC\n* Scheduling\n* A Shared-Memory Multiprocessor OS\n\n###Lesson 5: Distributed Systems\n\n* Definitions \n* Lamport Clocks\n* Latency limits\n* Active networks\n* Systems from Components\n \n###Lesson 6: Distributed Object Technology\n\n* Spring Operating System\n* Java RMI\n* Enterprise Java Beans\n \n###Lesson 7: Design and Implementation of Distributed Services\n\n* Global Memory System  \n* Distributed Shared Memory \n* Distributed File System\n\n###Lesson 8: System Recovery\n\n* Lightweight Recoverable Virtual Memory\n* Rio Vista \n* Quicksilver\n \n###Lesson 9: Internet Scale Computing\n\n* Giant Scale Services\n* MapReduce\n* Content Delivery Networks\n \n###L10: Real-Time and Multimedia\n\n* Time sensitive Linux\n* Persistent temporal streams\n \n###L11: Security\n\n* Principles of Information Security\nSecurity \n* The Andrew System", "name": "Advanced Operating Systems", "language": "en", "homepage": "https://www.udacity.com/course/advanced-operating-systems--ud189?utm_medium=referral&utm_campaign=api", "shortDescription": "", "description": "In this course, we will see all the advances that have led to the state-of-the-art operating system that we know today, covering variety of platforms -- cell phones, multi-core, parallel systems, distributed systems, and cloud computing."}, {"lectures": "### Lesson 1: Computability\n* Languages & Countability\n* Turing Machines\n* The Church-Turing Thesis\n* Universality\n* Undecidability\n\n### Lesson 2: Complexity\n* P and NP\n* NP-Completeness\n* NP-Complete Problems\n* The Golden Ticket\n\n### Lesson 3: Algorithms\n* Dynamic Programming\n* Fast Fourier Transform\n* Maximum Flow\n* Maximum Bipartite Matching\n* Linear Programming\n* Duality\n* Randomized Algorithms\n* Approximation Algorithms", "name": "Computability, Complexity & Algorithms", "language": "en", "homepage": "https://www.udacity.com/course/computability-complexity-algorithms--ud061?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn tools and techniques that will help you recognize when problems you encounter are intractable and when there an efficient solution.", "description": "<i>This class is offered as CS6505 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nIn this course, we will ask the big questions, \u201cWhat is a computer? What are the limits of computation? Are there problems that no computer will ever solve? Are there problems that can\u2019t be solved quickly? What kinds of problems can we solve efficiently and how do we go about developing these algorithms?\u201d Understanding the power and limitations of algorithms helps us develop the tools to make real-world computers smarter, faster and safer."}, {"lectures": "### Unit 1: Introduction to KBAI and Cognitive Systems.\n- Where Knowledge-Based AI fits into AI as a whole\n- Cognitive systems: what are they?\n- AI and cognition: how are they connected?\n\n### Unit 2: Fundamentals\n- Semantic Networks\n- Generate & Test\n- Means-Ends Analysis\n- Problem Reduction\n- Production Systems\n\n### Unit 3: Common Sense Reasoning\n- Frames\n- Understanding\n- Common Sense Reasoning\n- Scripts\n\n### Unit 4: Planning\n- Logic\n- Planning\n\n### Unit 5: Learning\n- Learning by Recording Cases\n- Incremental Concept Learning\n- Classification\n- Version Spaces & Discrimination Trees\n\n### Unit 6: Analogical Reasoning\n- Case-Based Reasoning\n- Explanation-Based Learning\n- Analogical Reasoning\n\n### Unit 7: Visuospatial Reasoning\n- Constraint Propagation\n- Visuospatial Reasoning\n\n### Unit 8: Design & Creativity\n- Configuration\n- Diagnosis\n- Design\n- Creativity\n\n### Unit 9: Metacognition\n- Learning by Correcting Mistakes\n- Meta-Reasoning\n- AI Ethics", "name": "Knowledge-Based AI: Cognitive Systems", "language": "en", "homepage": "https://www.udacity.com/course/knowledge-based-ai-cognitive-systems--ud409?utm_medium=referral&utm_campaign=api", "shortDescription": "The twin goals of knowledge-based artificial intelligence (AI) are to build AI agents capable of human-level intelligence and gain insights into human cognition.", "description": "<i>This class is offered as CS7637 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nThis is a core course in artificial intelligence. It is designed to be a challenging course, involving significant independent work, readings, assignments, and projects. It covers structured knowledge representations, as well as knowledge-based methods of problem solving, planning, decision-making, and learning.\n\nThe class is organized around three primary learning goals. First, this class teaches the concepts, methods, and prominent issues in knowledge-based artificial intelligence. Second, it teaches the specific skills and abilities needed to apply those concepts to the design of knowledge-based AI agents. Third, it teaches the relationship between knowledge-based artificial intelligence and the study of human cognition."}, {"lectures": "###Lesson 1: Introduction and Trends\n- Computer Architecture & Tech Trends\n- Moore's Law\n- Processor Speed, Cost, Power\n- Power Consumption\n- Fabrication Yield\n\n###Lesson 2: Performance Metrics and Evaluation\n\n- Measuring Performance\n- Benchmarks Standards\n- Iron Law of Performance\n- Amdahl's Law\n- Lhadma's Law\n\n###Lesson 3: Pipelining Review\n- Pipeline CPI\n- Processor Pipeline Stalls\n- Data Dependencies\n- Pipelining Outro\n\n###Lesson 4: Branches\n- Branch Prediction\n- Direction Predictor\n- Hierarchical Predictors \n- PShare\n\n###Lesson 5: Predication\n- If Conversion\n- Conditional Move\n- MOVc Summary\n\n###Lesson 6: Instruction Level Parallelism (ILP)\n- ILP Intro\n- RAW Dependencies \n- WAW Dependencies \n- Duplicating Register Values \n- Instruction Level Parallelism (ILP) \n \n###Lesson 7: Instruction Scheduling\n- Improving IPC\n- Tomasulo's Algorithm \n- Load and Store Instructions \n\n###Lesson 8: ReOrder Buffer\n- Exceptions in Out Of Order Execution \n- Branch Misprediction \n- Hardware Organization with ROB \n\n###Lesson 9: Memory Ordering\n- Memory Access Ordering\n- When Does Memory Write Happen \n- Out of Order Load Store Execution \n- Store to Load Forwarding \n- LSQ, ROB, and RS \n\n###Lesson 9: Memory\n- How Memory Works\n- One Memory Bit SRAM \n- One Memory Bit DRAM \n- Fast Page Mode \n- Connecting DRAM To The Processor  \n\n###Lesson 10: Multi-Processing \n- Flynn's Taxonomy of Parallel Machines \n- Multiprocessor Needs Parallel Programs! \n- Centralized Shared Memory \n- Distributed Shared Memory \n- Message Passing Vs Shared Memory \n- Shared Memory Hardware \n- SMT Hardware Changes \n- SMT and Cache Performance", "name": "High Performance Computer Architecture", "language": "en", "homepage": "https://www.udacity.com/course/high-performance-computer-architecture--ud007?utm_medium=referral&utm_campaign=api", "shortDescription": "The HPCA course covers performance measurement, pipelining, and improved parallelism through various means.", "description": "<i>This class is offered as CS6290 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nThe course begins with a lesson on performance measurement, which leads to a discussion on the necessity of performance improvement.\n\nPipelining, the first level of performance refinement, is reviewed. The weaknesses of pipelining will be exposed and explored, and various solutions to these issues will be studied. The student will learn hardware, software, and compiler based solutions to these issues."}, {"lectures": "###Lesson 1: The US Healthcare System\nThis lesson will discuss unique and the complex nature of the US healthcare system: its key problems, the specific challenges presented by chronic disease, the major disconnect between the health system\u2019s capabilities and the demands of chronic disease management, and the hope that a combination of new incentives, health IT adoption, and new models of care can bridge this disconnect leading to a more efficient, effective, safer and more patient-centered US system of care.\n###Lesson 2: Federal Policies & Initiatives\nThis lesson will focus on the important details of the specific programs that the federal government has put into place to spur health IT adoption by eligible providers and hospitals as well as the role played by financial incentives that reward performance, rather than the quantity of procedures. \n###Lesson 3: Health Information Exchange\nThis lesson will focus on the rationale for and the major challenges of health information exchange (HIE). We will discuss the various ways of classifying HIE, how to differentiate the various HIE architectures, and the Indiana Health Information Exchange as a premier example including descriptions of its key services. We will discuss new approaches and technologies with a particular emphasis on Direct HIE, a new technology based on secure email and encrypted attachments.\n###Lesson 4: Privacy, Security and Trust\nThis lesson focuses on the keys issues of privacy, security, and trust in a world of digital records and health information exchange. Students will understand the key role that patient engagement plays in chronic disease prevention and management and the concerns patients have about sharing their health data. They will also explore the various privacy consent models. Data segmentation will be discussed as a key challenge for obtaining patient consent under what may be the most acceptable model. The concept of public key infrastructure (PKI) including the roles of the public key, private key, registration authority and certificate authority will be covered.\n###Lesson 5A: Data Standards\nWe divide the discussion of standards into those for health data and those for achieving its sharing by fostering interoperability. This lesson  focuses on data standards after reviewing the rationale for standards and the evolutions that have been taking place in their use, technology and structure. Students will be able to recognize the difference between a classification and an ontology.  They will be familiar with the key data standards (including ICD, CPT, LOINC and SNOMED). They will also gain an overview of the differences between standards based on EDI/X12 and XML.\n###Lesson 5B: Interoperability Standards\nThis lesson builds on Lesson 5A on data standards to show how these data are transmitted within messages using HL7 and packaged into CCDA-based clinical documents for sharing via HIE. We\u2019ll briefly introduce even more advanced standards with a particular emphasis on clinical decision support (CDS, an important technology for the future) and the key elements of and remaining challenges with standards to support CDS. We\u2019ll also discuss more facile next generation approaches based on web technologies and approaches. \n###Lesson 6: Clinical Data Collection and Visualization Challenges\nStudents should understand the key roles that data plays in medical practice and the root causes of common data quality issues in general and the specific root causes of data quality issues with respect to electronic health records. They should understand the high level challenges of efficiently and accurately collecting high quality, comprehensive clinical data from physicians and of visualizing digital health data in a way that supports the provider\u2019s mental model. They should understand the key roles that information technology plays in the future vision of healthcare.\n###Lesson 7: Empowering the Patient\nStudents should understand the key role that support for patients can play so they can achieve behavior change, adhere to their prescribed treatments and generate data to help their providers more continuously manage their chronic diseases. They should understand patient interests. They should understand the key information technology tools now available to patients including patient health records, portals, social networking, in home technologies and mobile devices and sensors. They should have a detailed functional understanding of personal health records and their potential as app platforms. They should understand the potential role of social networking in patient education and care management. They should understand the various telemedicine modalities being developed and offered for use by patients at home.\n###Lesson 8: Population Health Management\nStudents should understand the difference between individual patient management, population management and public health. They should understand the technologies for aggregating data, the kinds of data that are collected and the kinds of reports that are required for population and public health management.\n###Lesson 9: Data Query in a Federated Environment\nStudents should understand the challenges of data query and aggregation in an environment where care providers are using disparate and non-interoperable EHRs. They should be familiar with and understand the differences among the distributed query technologies. They should be familiar with the distributed query standards and the various open source query frameworks reviewed in this lesson.\n###Lesson 10: Big Data Meets Healthcare\nStudents should understand the concept of \u201cbig data\u201d; the common technical approaches to modeling and simulation and the common applications of each. They should be familiar with the specific case studies of analytic applications to healthcare problems as diverse as improved clinical decision support, understanding clinical processes, modeling care spaces and providing optimal patient-specific treatments.", "name": "Health Informatics in the Cloud", "language": "en", "homepage": "https://www.udacity.com/course/health-informatics-in-the-cloud--ud809?utm_medium=referral&utm_campaign=api", "shortDescription": "This survey course provides a broad, forward-facing overview of contemporary health informatics within the context of the US healthcare delivery system.", "description": "<i>This class is offered as CS6440 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nThis is a survey course designed to provide a broad, forward-facing overview of contemporary health informatics, a specialized field of computing that seeks to improve the quality and efficiency of healthcare delivery. To understand health informatics (HIT) you also need to have at least a basic understanding of the complex and highly regulated US healthcare industry. The course is designed for students from diverse backgrounds and who have not been previously exposed to HIT. It is divided into three sections:\n\nThe US healthcare delivery and the key role of the federal government in promoting HIT adoption\n\nThe core technologies that drive all contemporary HIT systems and tools\n\nThe real world applications of HIT from electronic medical and personal health records to exploiting digital data aggregated from them for research and other purposes"}, {"lectures": "### Lesson 1: Introduction\n\n- Computer Networking Overview\n- What This Class is Not About\n\n\n### Lesson 2: Architecture & Principles\n\n-\tA Brief History of the Internet\n-\tArchitectural Design Principles\n-\tPacket Switching\n-\tFile Transfer\n-\tEnd to End Argument Violations\n\n### Lesson 3: Switching\n\n-\tSwitching and Bridging\n-\tBootstrapping: Networking Two Hosts\n-\tARP: Address Resolution Protocol\n-\tInterconnecting LANs with Hubs\n-\tSwitches: Traffic Isolation\n-\tSpanning Tree\n-\tSwitches vs. Routers\n-\tBuffer Sizing for a TCP Sender\n\n\n### Lesson 4: Routing\n\n-\tInternet Routing\n-\tIntra-AS Topology\n-\tDistance-Vector Routing\n-\tLink State Routing\n-\tInterdomain Routing\n-\tIGP vs. iBGP\n-\tBGP Route Selection\n-\tMultiple Exit Discriminator (MEI)\n-\tInterdomain Routing Business Models\n\n\n### Lesson 5: Naming, Addressing & Forwarding\n\n-\tIP Addressing\n-\tPre-1994: \u201cClassful\u201d Addressing\n-\tIP Address Allocation\n-\tClassless Interdomain Routing (CIDR)\n-\tMultihoming Frustrates Aggregation\n-\tAddress Lookup Using Tries\n-\tMemory Efficiency and Fast Lookup\n-\tAlternatives to LPM with Tries\n-\tNAT and IPv6\n-\tNetwork Address Translation (NAT)\n\n### Lesson 5.1: Router Design Basics\n\n-\tRouter Design\n-\tBasic Router Architecture\n-\tDecision: Crossbar Switching\n-\tSwitching Algorithm: Maximal Matching\n-\tHead of Line Blocking\n-\tScheduling and Fairness\n-\tMax-Min Fairness\n\n### Lesson 5.2: Domain Name System (DNS)\n\n-\tRecord Types\n-\tExamples (using \u201cdig\u201d)\n-\tLookup IP Address\n\n### Lesson 6: Congestion Control & Streaming\n\n-\tCongestion Control\n-\tAIMD (TCP Congestion Control)\n-\tData Centers & TCP \u201cIncast\u201d\n-\tBarrier Synchronization & Idle Time\n-\tMultimedia & Streaming\n-\tDigitizing Audio & Video\n-\tStreaming Video\n-\tSkype\n\n\n### Lesson 7: Rate Limiting and Traffic Shaping\n\n-\tTraffic Classification & Shaping\n-\tSource Classification \n-\tLeaky Bucket Traffic Shaping\n-\t(r, t) Traffic Shaping\n-\tShaping Bursty Traffic Patterns\n-\tPower Boost\n-\tEffects on Latency\n-\tBuffer Bloat\n-\tPacket Monitoring\n\n### Lesson 8: Content Distribution\n\n-\tThe Web and Caching\n-\tHTTP Requests\n-\tPersistent Connections\n-\tContent Distribution Networks (CDNs)\n-\tServer Selection\n-\tContent Routing\n-\tBit Torrent\n-\tSolution to Freeriding: \u201cChoking\u201d\n-\tDistributed Hash Tables\n-\tConsistent Hashing\n\n### Lesson 9: Software Defined Networking\n\n-\tNetwork Management Overview\n-\tSoftware Defined Networking (SDN)\n-\tControl and Data Planes\n-\tDifferent SDN Controllers\n-\tNOX: Overview\n-\tRyu, Floodlight, Nox and Pox\n-\tCustomizing Control\n\n### Lesson 10: Traffic Engineering\n\n-\tTraffic Engineering Overview\n-\tInterdomain Traffic Engineering\n-\tMeasuring, Modeling and Controlling Traffic\n-\tLink Utilization Function\n-\tBGP in Interdomain Traffic Engineering\n-\tMultipath Routing\n-\tData Center Networking\n-\tValiant Load Balance\n-\tJellyfish Data Center Topology\n\n### Lesson 11: Network Security\n\n-\tInternet is Insecure\n-\tResource Exhaustion \n-\tRouting Security\n-\tOrigin and Path Authentication\n-\tDNS Security\n-\tDNS Cache Poisoning\n\n### Lesson 11.1: Internet Worms\n\n-\tViruses and Internet Worms\n-\tInternet Worm Lifecyle\n-\tFirst Worm: \u201cMorris\u201d Worm\n-\tWorm Outbreaks in Detail \n-\tModeling Fast-Spreading Worms\n\n### Lesson 11.2: Spam\n\n-\tSpam\n-\tIP Blacklisting\n\n### Lesson 11.3: Denial of Service (DoS) Attacks\n\n-\tTCP 3-Way Handshake\n-\tInferring Denial of Service Activity using Backscatter\n-\tAutomated DoS Attack Mitigation\n-\tMTPCP", "name": "Computer Networking", "language": "en", "homepage": "https://www.udacity.com/course/computer-networking--ud436?utm_medium=referral&utm_campaign=api", "shortDescription": "This is an advanced Computer Networking course that delves into the latest concepts and tools used by the CN industry.", "description": "<i>This class is offered as CS6250 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nThis course covers advanced topics in Computer Networking such as Software-Defined Networking (SDN), Data Center Networking and Content Distribution. The course is divided into three parts:\n\nPart 1 is about the implementation, design principles and goals of a Computer Network and touches upon the various routing algorithms used in CN (such as link-state and distance vector). \n\nPart 2 talks about resource control and content distribution in Networking Applications. It covers Congestion Control and Traffic Shaping.\n\nPart 3 deals with the operations and management of computer networks encompassing SDN's (Software Defined Networks), Traffic Engineering and Network Security."}, {"lectures": "### Lesson 1: Introduction and Overview\n\n- Importance of Software Engineering\n- Discipline of Software Engineering\n- The Software Crisis\n- Software Phases\n\n### Lesson 2: Life Cycle Models\n\n- Introduction with Barry Bohem\n- Requirements Engineering\n- Design\n- Maintenance \n- Software Process Model Introduction\n- Waterfall Process\n- Spiral Process\n- Evolutionary Prototyping Process\n- Rational Unified Process \n- Agile Process\n- Choosing a Model\n- Lifecycle Documents\n\n\n### Lesson 3: Integrated Development Environment\n\n- Eclipse Introduction\n- IDE Overview\n- Plug-Ins\n- Eclipse Demo: Create Java Project\n- Eclipse Demo: Create a Class\n- Eclipse Demo: Run Configuration\n- Eclipse Demo: Debugging\n\n\n### Lesson 4: Version Control Systems\n\n- Interview with John Britton\n- Version Control System Introduction\n- Two Main Types of VCS\n- Introduction to Git\n- Git Workflow\n- Git Demo: Intro to Git\n- Git Demo: Git + Eclipse\n- Git Demo: Github\n- Git Recap: Local Repositories\n- Git Recap: Remote Repositories\n\n\n### Lesson 5: Requirements Engineering\n\n- Interview with Jane Cleland-Huang\n- General RE Definition\n- Software Intensive Systems\n- Functional and Nonfunctional Requirements\n- User and System Requirements\n- Modeling Requirements\n- Analyzing Requirements\n- Requirements Prioritization\n- Requirements Engineering Process\n\n\n### Lesson 6: OO Software and UML\n\n- Object Orientation Introduction\n- UML Structural Diagrams: Class Diagrams\n- Class Diagram: Creation Tips\n- UML Structural Diagrams: Component Diagram\n- UML Structural Diagram: Deployment Diagram\n- UML Behavioral Diagram: Use Case\n- Use Case Diagram: Creation Tips\n- UML Behavioral Diagrams: Sequence\n- UML Behavioral Diagrams: State Transition Diagram\n\n### Lesson 7: Software Architecture\n\n- Interview with Nenad Medvidovic \n- What is Software Architecture?\n- Prescriptive vs. Descriptive Architecture \n- Architectural Evolution\n- Architectural Degradation \n- Architectural Recovery\n- Architectural Elements\n- Components, Connectors, and Configuration\n- Deployment Architectural Perspective\n\n### Lesson 8: A Tale of Analysis and Design \n\n- Analyzing Requirements\n- Refining Classes and Attributes\n- Adding Attributes\n- Identifying Operations\n- Refining the Class Diagram\n\n### Lesson 9: Design Patterns\n\n- Patterns Catalogue\n- Pattern Format\n- Factory Method Pattern\n- Strategy Pattern\n- Choosing a Pattern\n- Negative Design Patterns\n\n\n### Lesson 10: Unified Software Process\n\n- Use-Case Driven\n- Inception Phase\n- Elaboration Phase\n- Construction Phase\n- Transition Phase\n- Phases and Iterations\n\n### Lesson 11: General Concepts\n\n- Failure, Fault and Error\n- Verification Approaches\n- Pros and Cons of Approaches\n- Testing Introduction\n- Testing Granularity Levels\n- Alpha and Beta Testing\n- Black and White Box Testing Introduction\n\n### Lesson 12: Black-Box Testing\n\n- Systematic Functional Testing Approach\n- Test Data Selection\n- Category Partition Method\n- Produce and Evaluate Test Case Specifications\n- Generate Test Cases from Test Case Specifications\n- Model Based Testing\n- Finite State Machines\n\n### Lesson 13: White-Box Testing\n\n- Coverage Criteria Intro\n- Statement Coverage\n- Control Flow Graphs\n- Test Criteria Subsumption\n- MC/DC Coverage\n\n### Lesson 14: Agile Development Methods\n\n- Cost of Change\n- Agile Software Development\n- Extreme Programming (XP)\n- XP\u2019s Values and Principles\n- Test First Development\n- Refactoring\n- Pair Programming\n- Continuous Integration\n- Testing Strategy\n- High Level Scrum Process\n\n### Lesson 15: Software Refactoring\n\n- Reasons to Refactor\n- Refactoring Demo\n- Refactoring Risks\n- Cost of Refactoring\n- When Not to Refactor", "name": "Software Development Process", "language": "en", "homepage": "https://www.udacity.com/course/software-development-process--ud805?utm_medium=referral&utm_campaign=api", "shortDescription": "Software Development Processes explores requirements engineering, architecture and design, testing, and software quality in general.", "description": "<i>This class is offered as CS6330 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nIn SDP, you will learn how to select and implement the ideal software process for your development project. Through Professor Orso's engaging examples and interviews with industry insiders, you will learn both conceptual and practical aspects of software engineering. The course covers requirements engineering, architecture and design, testing and maintenance, and software quality in general. \n\nThe goal of this class is to equip you with the skills necessary to define requirements, set up an integrated development environment (IDE), learn Git (and Github!) and use Unified Modeling Language (UML) to design and build an Android application. We will also examine several testing practices and refactoring techniques that are helpful before the launch of your software project. \n\nWhile everyone working with software should have these skills, they are particularly important for Software Engineers and Engineering Managers."}, {"lectures": "### Lesson 1: Localization \n\n-\tLocalization\n-\tTotal Probability\n-\tUniform Distribution\n-\tProbability After Sense\n-\tNormalize Distribution\n-\tPhit and Pmiss\n-\tSum of Probabilities\n-\tSense Function\n-\tExact Motion\n-\tMove Function\n-\tBayes Rule\n-\tTheorem of Total Probability\n\n### Lesson 2: Kalman Filters\n\n-\tGaussian Intro\n-\tVariance Comparison\n-\tMaximize Gaussian\n-\tMeasurement and Motion\n-\tParameter Update\n-\tNew Mean Variance\n-\tGaussian Motion\n-\tKalman Filter Code\n-\tKalman Prediction\n-\tKalman Filter Design\n-\tKalman Matrices\n\n### Lesson 3: Particle Filters\n\n-\tSlate Space\n-\tBelief Modality\n-\tParticle Filters\n-\tUsing Robot Class\n-\tRobot World\n-\tRobot Particles\n\n### Lesson 4: Search\n\n-\tMotion Planning\n-\tCompute Cost\n-\tOptimal Path\n-\tFirst Search Program\n-\tExpansion Grid\n-\tDynamic Programming\n-\tComputing Value\n-\tOptimal Policy\n\n### Lesson 5: PID Control\n\n-\tRobot Motion\n-\tSmoothing Algorithm\n-\tPath Smoothing\n-\tZero Data Weight\n-\tPid Control\n-\tProportional Control\n-\tImplement P Controller\n-\tOscillations\n-\tPd Controller\n-\tSystematic Bias\n-\tPid Implementation\n-\tParameter Optimization\n\n### Lesson 6: SLAM (Simultaneous Localization and Mapping)\n\n-\tLocalization\n-\tPlanning\n-\tSegmented Ste\n-\tFun with Parameters\n-\tSLAM\n-\tGraph SLAM\n-\tImplementing Constraints\n-\tAdding Landmarks\n-\tMatrix Modification\n-\tUntouched Fields\n-\tLandmark Position\n-\tConfident Measurements\n-\tImplementing SLAM\n\n### Runaway Robot Final Project", "name": "Artificial Intelligence for Robotics", "language": "en", "homepage": "https://www.udacity.com/course/artificial-intelligence-for-robotics--cs373?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to program all the major systems of a robotic car. Topics include planning, search, localization, tracking, and control.", "description": "Learn how to program all the major systems of a robotic car from the leader of Google and Stanford's autonomous driving teams. This class will teach you basic methods in Artificial Intelligence, including: probabilistic inference, planning and search, localization, tracking and control, all with a focus on robotics. Extensive programming examples and assignments will apply these methods in the context of building self-driving cars.\n\nThis course is offered as part of the Georgia Tech Masters in Computer Science. The updated course includes a final project, where you must chase a runaway robot that is trying to escape!"}, {"lectures": "### Lesson 1: Data Extraction Fundamentals\n\n- Assessing the Quality of Data\n- Intro to Tabular Formats\n- Parsing CSV\n- Parsing XLS with XLRD\n- Intro to JSON\n- Using Web APIs\n\n### Lesson 2: Data in More Complex Formats\n\n- Intro to XML\n- XML Design Principles\n- Parsing XML\n- Web Scraping\n- Parsing HTML\n\n\n### Lesson 3: Data Quality \n\n- What is Data Cleaning?\n- Sources of Dirty Data\n- Measuring Data Quality\n- A Blueprint for Cleaning\n- Auditing Validity \n- Auditing Accuracy\n- Auditing Completeness\n- Auditing Consistency\n- Auditing Uniformity\n\n### Lesson 4: Working with MongoDB\n\n- Data Modelling in MongoDB\n- Introduction to PyMongo\n- Field Queries\n- Projection Queries\n- Getting Data into MongoDB\n- Using mongoimport\n- Operators like $gt, $lt, $exists, $regex\n- Querying Arrays and using $in and $all Operators\n- Changing entries: $update, $set, $unset\n\n### Lesson 5: Analyzing Data\n\n- Examples of Aggregation Framework \n- The Aggregation Pipeline\n- Aggregation Operators: $match, $project, $unwind, $group\n- Multiple Stages Using a Given Operator\n\n### Lesson 6: Case Study - OpenStreetMap Data\n\n- Using iterative parsing for large datafiles\n- Open Street Map XML Overview\n- Exercises around OpenStreetMap data\n- Final Project Instructions", "name": "Data Wrangling with MongoDB", "language": "en", "homepage": "https://www.udacity.com/course/data-wrangling-with-mongodb--ud032?utm_medium=referral&utm_campaign=api", "shortDescription": "Data Scientists spend most of their time cleaning data. In this course, you will learn to convert and manipulate messy data to extract what you need.", "description": "In this course, we will explore how to wrangle data from diverse sources and shape it to enable data-driven applications. Some data scientists spend the bulk of their time doing this!\n\nStudents will learn how to gather and extract data from widely used data formats. They will learn how to assess the quality of data and explore best practices for data cleaning. We will also introduce students to MongoDB, covering the essentials of storing data and the MongoDB query language together with exploratory analysis using the MongoDB aggregation framework.\n\nThis is a great course for those interested in entry-level data science positions as well as current business/data analysts looking to add big data to their repertoire, and managers working with data professionals or looking to leverage big data.\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd002\">Data Analyst</a> Nanodegree."}, {"lectures": "### Lesson 1 - Introduction to the QMV Process\nLearn about the Question, Modeling, and Validation (QMV) process of data analysis. Understand the basics behind each step and apply the QMV process to analyze on how Udacity employees choose candies!\n\n### Lesson 2 - Question Phase\nWe will drill in on the questioning phase of the QMV process. We\u2019ll teach you how to turn a vague question into a statistical one that can be analyzed with statistics and machine learning. You will also analyze a Twitter dataset and try to predict when a person will tweet next! \n\n### Lesson 3 - Modeling Phase\nBuilding upon lesson 2, you will learn how to build rigorous mathematical, statistical, and machine learning models so you can make accurate predictions. You look through the recently released U.S. medicare dataset for anomalous transactions.\n\n### Lesson 4 - Validation Phase\nSo how do you tell if your model is doing well? In this lesson, we will teach you some of the fundamental and important metrics that you can use to grade the performance of the models that you\u2019ve build. You will analyze the AT&T connected cars data set and see if you can tell which driver is which by analyzing their driving patterns.\n\n### Final Project - Identify Hacking Attempts from Network Flow Logs\n\nYou will create a program that examines log data of net flow traffic, and produces a score, from 1 to 10, describing the degree to which the logs suggest a brute force attack is taking place on a server.", "name": "Model Building and Validation", "language": "en", "homepage": "https://www.udacity.com/course/model-building-and-validation--ud919?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will teach you how to start from scratch in understanding and paying attention to what is important in the data and how to answer questions about data", "description": "This course will teach you how to start from scratch in answering questions about the real world using data. Machine learning happens to be a small part of this process. The model building process involves setting up ways of collecting data, understanding and paying attention to what is important in the data to answer the questions you are asking, finding a statistical, mathematical or a simulation model to gain understanding and make predictions. \n\nAll of these things are equally important and model building is a crucial skill to acquire in every field of science. The process stays true to the scientific method, making what you learn through your models useful for gaining an understanding of whatever you are investigating as well as make predictions that hold true to test. \n\nWe will take you on a journey through building various models. This process involves asking questions, gathering and manipulating data, building models, and ultimately testing and evaluating them."}, {"lectures": "Lesson 1: Affordances and Signifiers (4 hours)\n\nLesson 2: Conceptual Models and the System Image (4 hours)\n\nLesson 3: Gulfs of Evaluation and Execution (1 hour)\n\nFinal Project: Design the User Interface (UI) for a Timebank (7 hours) \n\n*The times include watching instructional videos, completing the course exercises, and finishing projects. In total, this course should take an average of 16 hours.", "name": "Intro to the Design of Everyday Things", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-the-design-of-everyday-things--design101?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will provide you with the insight to start recognizing the role of design in today\u2019s world, and to start making better design decisions in your own life.", "description": "Everyone designs. Design occurs anytime you deliberately change an environment to make things better. When you decide what seat to take in an auditorium you\u2019re designing your experience. When you rearrange the furniture in a room or draft an email, you\u2019re designing. \n\nThis course provides a summary of key concepts from the first two chapters of <a href=\"http://www.amazon.com/gp/product/0465050654/ref=as_li_ss_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0465050654&linkCode=as2&tag=udacity-20\">The Design of Everyday Things</a>  (Revised and Expanded Edition, November 2013) by Don Norman. It\u2019s intended to be enjoyable and informative for anyone curious about design: everyday people, technical people, designers, and non-designers alike."}, {"lectures": "In this course, you will learn how to build web experiences that adapt to the different screen sizes and capabilities that mobile devices offer, and how to scalably optimize media for mobile and desktop.  We will cover programming touch interaction, as well as how to optimize form field input for mobile devices and use APIs like geolocation and the accelerometer, and ensuring your web experiences work great when network conditions are sub-optimal.  Finally, you\u2019ll gain the tools to investigate performance in mobile applications, with a strong understanding of mobile networking, battery usage patterns and optimizing paint techniques to build smooth animations on mobile.\n\n### Lesson 01: Syllabus\nWe\u2019ll start with a high-level overview of the course and what to expect in it. We\u2019ll also go into more depth on what we mean by mobile web development, and why you should care about it.\n\n### Lesson 02: Mobile Development Tools\nWorkflow and tooling is incredibly important for building great web apps, and this carries over to mobile web development. This lesson will show you how to use the Chrome Developer Tools to develop for the mobile web.\n\n### Lesson 03: Mobile UX and Viewport\nDesigning for the mobile web is all about a smooth user experience. This lesson will get you thinking about how to achieve that on mobile, and we\u2019ll introduce the first of many tools you need to achieve this: the viewport.\n\n### Lesson 04: Fluid Design\nMobile means lots of different devices and form factors. We\u2019ll discuss how to make your site responsive, clean, and user-friendly on multiple devices and layouts.\n\n### Lesson 05: Media Queries\nSometimes different devices call for fundamentally different layouts. This lesson will teach you how to achieve this using media queries.\n\n### Lesson 06: Responsive Images\nMedia requirements are different in mobile - network constraints and very high resolution screens set up a conflict that can be challenging.  We\u2019ll talk about how best to integrate media into your mobile web applications, and adaptively scaling images based on the environment.\n\n### Lesson 07: Optimizing Performance\nUsers expect a fast, seamless experience on mobile. We\u2019ll go over optimizing various performance metrics to improve that experience, such as network, cpu, rendering, and battery performance.\n\n### Lesson 08: Touch\nTouch input is fundamentally different from mouse input, and requires you to think about your user interactions differently. We\u2019ll go over UX concerns with touch-based interaction, and how to design user interactions that work across devices.\n\n### Lesson 09: Input\nUsing a keyboard on mobile is awful. We\u2019ll discuss ways to improve it, using semantic input for form data, and other user input options on mobile.\n\n### Lesson 10: Device Access\nMobile devices have a full array of sensors typically unavailable on desktop. We\u2019ll talk about camera access, geolocation, and other sensors and feedback you have access to on mobile.\n\n### Lesson 11: Offline and Storage\nIt\u2019s an unfortunate reality that mobile users aren\u2019t always online. We\u2019ll go over using the local cache as well as local storage APIs to give your users a great offline (and partially-online) experience as well.\n\n### Lesson 12: Wrap-up\nWe\u2019ll finish up the class by talking briefly about other topics to consider, such as app experience, monetization, deployment and distribution. We\u2019ll also point you to other resources to look at moving forward in your career.", "name": "Mobile Web Development", "language": "en", "homepage": "https://www.udacity.com/course/mobile-web-development--cs256?utm_medium=referral&utm_campaign=api", "shortDescription": "In this course, you'll learn how to build great mobile web experiences. We'll cover performance issues on mobile, and how to make use of mobile sensors.", "description": "So you\u2019ve heard mobile is kind of a big deal, and you\u2019re not sure how to transform your traditional desktop-focused web apps into fast, effective mobile experiences. This course is designed to teach web developers what they need to know to create great cross-device mobile web experiences. This course will focus on building mobile web apps, which will work across multiple platforms including Android, iOS, and others."}, {"lectures": "### Overview\nThroughout the course, you\u2019ll build a performance toolbox to help you build faster website experiences by taking advantage of PageSpeed Insights recommendations and measuring page performance on mobile and desktop with Chrome Developer Tools.\n\nThis class contains an introductory lesson, two primary lessons and a final project. Before diving into optimizations, you\u2019ll build an understanding of how browsers convert HTML, CSS and JavaScript into websites. Along the way, you\u2019ll practice measuring performance using the same tools Google engineers use.\n\nThen comes the really fun part: optimization! You\u2019ll learn about easy-to-implement performance gains and develop a simple and powerful model for uncovering optimization opportunities.\n\nYou\u2019ll put your newfound performance skillset to the test with the final project, where you\u2019ll be optimizing your own online portfolio website!\n\n##Lessons\n###Lesson 0 (20 minutes)\nYou can\u2019t optimize what you can\u2019t measure, so in this lesson you\u2019ll learn how to open Chrome Developer Tools to measure the performance of mobile and desktop websites.\n\n###Lesson 1 (60 minutes)\nOptimizing any website\u2019s performance requires a strong understanding of how browsers build websites from HTML, CSS and JavaScript. You\u2019ll start by breaking down the **Critical Rendering Path** - the steps the browser has to take to render a page. You\u2019ll get an understanding of how:\n\n* **HTML** is converted to the **Document Object Model (DOM)**.\n* **CSS** is converted to the **CSS Object Model (CSSOM)**.\n* the browser runs **layout** to determine the position and size of elements before **painting** pixels on the screen.\n\nThroughout the lesson, you\u2019ll learn how to take advantage of the Timeline view in **Chrome Developer Tools** to measure each and every step\u2019s performance on mobile and desktop.\n\n###Lesson 2 (90 minutes)\nYou\u2019ll explore easy HTML, CSS and JavaScript optimizations with significant performance implications, some of which are as simple as adding a single attribute to an HTML tag! Along the way, you\u2019ll be developing the skills to help you diagnose opportunities for optimizations, including:\n\n* building **quick and dirty** diagrams of the Critical Rendering Path.\n* identifying **three key metrics** to triangulate potential performance bottlenecks.", "name": "Website Performance Optimization", "language": "en", "homepage": "https://www.udacity.com/course/website-performance-optimization--ud884?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how browsers convert HTML, CSS and JavaScript into websites while you experiment with Chrome Developer Tools to measure and optimize website speed!", "description": "You will learn how to optimize any website for speed by diving into the details of how mobile and desktop browsers render pages.\n\nIn this short course, you\u2019ll learn about the Critical Rendering Path, or the set of steps browsers must take to convert HTML, CSS and JavaScript into living, breathing websites. From there, you\u2019ll start exploring and experimenting with tools to measure performance and simple strategies to deliver the first pixels to the screen as early as possible. You\u2019ll learn how to dive into recommendations from [PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/ \"PageSpeed Insights\") and the Timeline view of Google Chrome\u2019s Developer Tools to find the data you need to achieve immediate performance boosts!\n\nThis course is also a part of our <a href=\"https://www.udacity.com/course/nd001\">Front-End Web Developer</a> Nanodegree."}, {"lectures": "### Lesson 1: Exploring the HTML and CSS\nYou will create our own version of 2048 by making changes to the existing HTML and CSS files. Within 10 minutes, you'll have your own game. Within an hour, you're friends will be playing **your** 2048 game (fun bonus: your game will be totally mobile-friendly). The topics we'll cover are:\n\n* What is open source? \n* What is HTML? What is CSS? Javascript? \n* How do these three interact to lead to a fully functioning web/mobile app?\n* What is Github?\n* How do I get someone else's code, make changes, and create my own version?\n* How do I host and share my game?", "name": "Make Your Own 2048", "language": "en", "homepage": "https://www.udacity.com/course/make-your-own-2048--ud248?utm_medium=referral&utm_campaign=api", "shortDescription": "Ten minutes into this class you'll make your own completely personalized version of the insanely addictive game 2048. Even if you've never coded before. Pretty cool, no?", "description": "Ten minutes into this class you will make your own completely personalized version of the insanely addictive game <a href=\"http://gabrielecirulli.github.io/2048/\" target=\"_blank\">2048</a>. Even if you've never coded before. Pretty cool, no?\n\nYou'll do this by making small (but important) modifications to the source code for the original 2048 game. If this sounds intimidating, don't worry. We'll teach you the basics of HTML and CSS and how they interact with Javascript (don't worry if that sentence doesn't mean anything to you yet. It will soon).\n\nThe purpose of this class is to have fun learning how to quickly and easily take an existing open source program, make some changes, and create something that looks and feels completely new. The game you create will be mobile friendly (you can play it on your phone!) and totally shareable."}, {"lectures": "### Lesson 0\nOptional HTML/Javascript crash course\n\n### Lesson 1\nIntroduction to Canvas rendering\n\n### Lesson 2\nAtlases\n\n### Lesson 3\nMap rendering\n\n### Lesson 4\nBasic Input, handling events\n\n### Lesson 5\nThe entity hierarchy\n\n### Lesson 6\nBox2D, and using external libraries\n\n### Lesson 7\nAdding sound\n\n### Lesson 8\nAsynchronous Loading\n\n### Supplementary Materials\n![Alt text](https://s3.amazonaws.com/udacity-hosted-downloads/A9781430266976-3d.png)\n\n\n[Link to download free chapters](http://bit.ly/1i3rk63)", "name": "HTML5 Game Development", "language": "en", "homepage": "https://www.udacity.com/course/html5-game-development--cs255?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to build high-performance web games with HTML5. We'll port industry-standard development techniques to the web and use them to create a game.", "description": "This course will walk you through the major components of building GRITS, an HTML5 game. We'll talk about how to take standard game development techniques, and use them to create high performance HTML5 applications."}, {"lectures": "### Lesson 1: Perfect Ciphers\n\nWhat makes certain ciphers perfect, how the Lorenz Cipher was broken\n\n### Lesson 2: Symmetric Encryption\n\nSending messages when two people share a secret\n\n### Lesson 3: Key Exchange\n\nTechniques to establish a shared secret\n\n### Lesson 4: Asymmetric Encryption\n\nExchanging information using public key cryptosystems\n\n### Lesson 5: Public Key Protocols\n\nEncrypted key exchange, certificates, secure commerce\n\n### Lesson 6: Using Cryptographic Primitives\n\nHow cryptography can be useful for anonymizing communication, voting, and digital cash\n\n### Lesson 7: Secure Computation\n\nComputing without exposing data", "name": "Applied Cryptography", "language": "en", "homepage": "https://www.udacity.com/course/applied-cryptography--cs387?utm_medium=referral&utm_campaign=api", "shortDescription": "Cryptography is present in everyday life, from paying with a credit card to using the telephone.  Learn all about making and breaking puzzles in computing.", "description": "Cryptography is present in everyday life, from paying with a credit card to using the telephone. Learn all about making and breaking puzzles in computing."}, {"lectures": "### Lesson 1: Visualizing relationships in data\n\nSeeing relationships in data and predicting based on them; Simpson's paradox\n\n### Lesson 2: Probability \n\nProbability; Bayes Rule; Correlation vs. Causation\n\n### Lesson 3: Estimation \n\nMaximum Likelihood Estimation; Mean, Median, Mode; Standard Deviation, Variance\n\n### Lesson 4: Outliers and Normal Distribution \n\nOutliers, Quartiles; Binomial Distribution; Central Limit Theorem; Manipulating Normal Distribution\n\n### Lesson 5: Inference\n\nConfidence intervals; Hypothesis Testing\n\n### Lesson 6: Regression\n\nLinear regression; correlation\n\n### Lesson 7: Final Exam", "name": "Intro to Statistics", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-statistics--st101?utm_medium=referral&utm_campaign=api", "shortDescription": "Get ready to analyze, visualize, and interpret data! Thought-provoking examples and chances to combine statistics and programming will keep you engaged and challenged.", "description": "Statistics is about extracting meaning from data. In this class, we will introduce techniques for visualizing relationships in data and systematic techniques for understanding the relationships using mathematics."}, {"lectures": "Topic 1: Integer Operations\n\n- Properties of Integers\n- Absolute Value\n- Adding, Subtracting, Multiplying & Dividing\n- Order of Operations\n- Perimeter and Area of Rectangles, Squares & Triangles\n\nTopic 2: Fractions and Decimals\n\n- Simplifying Fractions\n- Mathematical Operations with Fractions\n- Rounding Decimals\n- Decimals and Applications\n- Fraction to Decimal Conversion\n- Scientific Notation\n\nTopic 3: Rates, Ratios, and Conversions\n\n- Ratios\n- Rates\n- Unit Conversions\n- Percents\n\nTopic 4: Algebraic Expressions and Equations\n\n- Algebraic Expressions\n- Solving a Linear Equation\n- Pythagorean Theorem\n\nTopic 5: Graphing Linear Equations\n\n- Graphing a Linear Equation\n- Slope of a Line\n- Writing a Linear Equation\n- Slope and Slope-Intercept Form", "name": "Intro Algebra Review", "language": "en", "homepage": "https://www.udacity.com/course/intro-algebra-review--ma004?utm_medium=referral&utm_campaign=api", "shortDescription": "A brief review of introductory algebra topics including integer operations, scientific notation, algebraic expressions, linear equations, and graphing.", "description": "This course provides a brief review of introductory algebra topics. Topics to be covered include integer operations, order of operations, perimeter and area, fractions and decimals, scientific notation, ratios and rates, conversions, percents, algebraic expressions, linear equations, the Pythagorean theorem, and graphing."}, {"lectures": "The following topics will be covered. There will be two midterms and one  final exam. There are no deadlines unless you are in the SJSU Plus-Udacity for-credit program. \n\nLesson 1: Number    \nLesson 2: Expressions    \nLesson 3: Polynomials    \nLesson 4: Equations    \nLesson 5-1: Coordinates    \nLesson 5-2: Distance    \nLesson 5-3: Midpoints And Slope    \nLesson 6-1: Slope And Equations    \nLesson 6-2: Points    \nLesson 7: Forms of the Equation of a Line    \nLesson 8: Inequalities And Absolute Value    \nLesson 9: More Inequalities And Equations    \nLesson 10: Parabolas    \nLesson 11: Factoring    \nLesson 12: Quadratic and Rational Inequalities    \nLesson 13: More Parabolas    \nLesson 14: Completing the Square    \nLesson 15: Quadratic Formula    \nLesson 16: Complex Numbers    \nLesson 17: Functions    \nLesson 18: Domain and Range    \nLesson 19: Behavior of Functions    \nLesson 20: Factor Theorem    \nLesson 21: Rational Zero Test    \nLesson 22: Intermediate Value Theorem    \nLesson 24: Asymptotes    \nLesson 25: Slant Asymptotes    \nLesson 26: Transformations    \nLesson 29: Exponential Functions    \nLesson 30: Scientific Notation    \nLesson 31: Logarithmic Functions    \nLesson 32: Log Properties    \nLesson 33: Solving Exponential and Logarithmic Equations    \nLesson 34: Population, Scrolls and Sound", "name": "College Algebra", "language": "en", "homepage": "https://www.udacity.com/course/college-algebra--ma008?utm_medium=referral&utm_campaign=api", "shortDescription": "Gain an in-depth understanding of algebraic principles and learn how to use them to solve problems you may meet in everyday life.", "description": "Math is everywhere. In this class, you\u2019ll gain an in-depth understanding of algebraic principles, many of which you may have seen before, and learn how to use them to solve problems that we encounter in everyday life.  The online version of College Algebra will cover all of the topics that you would see in more traditional class formats, but it will present the material in a way that we hope you\u2019ll find fresh and interesting. You will learn about functions, polynomials, graphing, complex numbers, exponential and logarithmic equations, and much more, all through exploring real-world scenarios."}, {"lectures": "Unit 1 - Review of Foundations \n\nUnit 2 - Equations and Inequalities \n\nUnit 3 - Graphs of Linear Equations \n\nUnit 4 - Systems of Equations \n\nUnit 5 - Exponents and Polynomials \n\nUnit 6 - Factoring \n\nUnit 7 - Rational Expressions \n\nUnit 8 - Rational Exponents and Radicals \n\nUnit 9 - Solving Quadratic Equations \n\nUnit 10 - Quadratic Equations and Applications \n\nUnit 11 - Conic Sections \n\nUnit 12 - Inverses, Exponentials, and Logarithms", "name": "Visualizing Algebra", "language": "en", "homepage": "https://www.udacity.com/course/visualizing-algebra--ma006?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the basics of Algebra through intuition and problem solving! From fractions to factors to functions, we\u2019ll cover a breadth of topics.", "description": "Throughout this course, we will use algebra to quantify and describe the world around us. Have you ever wondered how many songs can fit onto your flash drive? By the end of the course, you\u2019ll have stronger skills for modeling problems, analyzing patterns, and using algebra to arrive at conclusions."}, {"lectures": "### Lesson 1: Domains, Ranges, Oracles, and Kinds of Testing\n\nHow to think about the different elements of software testing\n\n### Lesson 2: Code Coverage\n\nHow to find parts of a program that need more testing\n\n### Lesson 3: Random Testing\n\nHow to automatically generate test cases that break code in unexpected ways\n\n### Lesson 4: Advanced Random Testing\n\nHow to engineer a sophisticated random test case generator\n\n### Lesson 5: Consequences\n\nHow to deal with lots of bugs, how to take a big input that triggers a bug and make it smaller, how to report a bug, and more!\n\n### Lesson 6: Conclusion", "name": "Software Testing", "language": "en", "homepage": "https://www.udacity.com/course/software-testing--cs258?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to catch bugs and break software as you discover different testing methods that will help you build better software.", "description": "When writing software, destruction can be just as valuable as creation. Learn how to catch bugs and break software as you discover different testing methods that will help you build better software."}, {"lectures": "### Lesson 1: A Social Network Magic Trick\n\nObjective: Become familiar with Algorithm Analysis. \n\n- Eulerian Path\n- Correctness of Na\u00efve\n- Russian Peasants Algorithm\n- Measuring Time\n- Steps for Naive, Steps for Russian\n- Divide and Conquer\n\n### Lesson 2: Growth Rates in Social Networks\n\nObjective: Use mathematical tools to analyze how things are connected.\n\n- Chain, Ring and Grid Networks\n- Big Theta \n- Planar Graphs\n- Nodes, Edges, Regions\n- Growth Rate of Edges in Planar Graph\n- Hypercube\n- Randomly Generated Graphs\n- N Squared\n- Tangled Hypercube\n\n### Lesson 3: Basic Graph Algorithms\n\nObjective: Find the quickest route to Kevin Bacon. \n\n- Properties of Social Networks\n- Clustering Coefficient\n- Connected Components\n- Running Time of Connected Components\n- Checking Pairwise Connectivity\n- Pairwise Shortest Path\n- Depth vs. Breadth First Search\n- Recursion Replacement\n- Marvel \u201cSocial\u201d Network\n- Finding Bridge Edges\n\n### Lesson 4: It\u2019s Who You Know\n\nObjective: Learn to keep track of your Best Friends using heaps.\n\n- Degree Centrality\n- Top K Via Partitioning\n- Three Partitioning Cases\n- Properties of a Heap \n- Patch Up a Heap\n- Down Heapify\n- Heap Sort\n\n### Lesson 5: Strong and Weak Bonds\n\nObjective: Work with Social Networks that have edge weights.\n\n- Make a Tree\n- Strength of Connections\n- Weighted Social Networks\n- How to Find the Shortest Path\n- Dijkstra\u2019s Shortest Path Algorithm\n- Floyd-Warshall Intro\n- Randomizing Clustering Coefficient \n- Bounds on the Estimate\n\n### Lesson 6: Hardness of Network Problems\n\nObjective: Explore what it means for a Social Network problem to be \n\"harder\" than other.\n\n- Tetristan\n- Exponential Running Time \n- Degrees of Hardness\n- Reduction: Long and Simple Path\n- Polynomial Time Decidable Problems\n- Non-deterministic Polynomial Time Decidable Problem\n- Clique Problem in NP\n- Find the Strangers\n- Graph Coloring is NP-Complete\n\n\n### Lesson 7: Review and Application\n\n- Interview with Peter Winker (Professor, Dartmouth College) on Names and Boxes Problem && Puzzles and Algorithms\n\n- Interview with Tina Eliassi-Rad (Professor, Rutgers University) on \nStatistical Measures in Network && Social Networks in Security and Protests\n\n- Interview with Andrew Goldberg (Principal Researcher, Microsoft Research) on Practical Algorithms\n\n- Interview with Vukosi Marivate (Graduate Student, Rutgers University) on Social Algorithms\n\t\n- Interview with Duncan Watts (Principal Researcher, Microsoft) on Pathway That Can Use Two Nodes\t\n\n- Intro to Graph Search Animation", "name": "Intro to Algorithms", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-algorithms--cs215?utm_medium=referral&utm_campaign=api", "shortDescription": "This class will give you an introduction to the design and analysis of algorithms, enabling you to analyze networks and discover how individuals are connected.", "description": "Ever played the Kevin Bacon game? This class will show you how it works by giving you an introduction to the design and analysis of algorithms, enabling you to discover how individuals are connected. "}, {"lectures": "### Lesson 1: Introduction\n\nMotivation and a trip down the graphics pipeline, laying out the fundamental processes\n\n### Lesson 2: Points, Vectors, and Meshes\n\nThe basics of 3D geometry definition\n\n### Lesson 3: Colors and Materials\n\nColor representation, material computations, transparency\n\n### Lesson 4: Transforms\n\nTranslation, scale, rotate and how to properly combine all these\n\n### Lesson 5: Matrices\n\nTransform representation and how to fully control these\n\n### Lesson 6: Lights\n\nDirectional and point light sources\n\n### Lesson 7: Cameras\n\nHow the camera is defined\n\n### Lesson 8: Textures and Reflections\n\nColor and opacity textures, along with reflection and normal mapping\n\n### Lesson 9: Shader Programming\n\nAn introduction to programming vertex and pixel shaders\n\n### Lesson 10: Interaction and Animation\n\nHow to select and make objects move", "name": "Interactive 3D Graphics", "language": "en", "homepage": "https://www.udacity.com/course/interactive-3d-graphics--cs291?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will teach you the principles of 3D computer graphics: meshes, transforms, lighting, animation, and making interactive 3D applications run in a browser.", "description": "This class will teach you about the basic principles of 3D computer graphics: meshes, transforms, cameras, materials, lighting, and animation."}, {"lectures": "### String Patterns\n\nFinding and specifying classes of strings using regular expressions\n    \n### Lexical Analysis\n\nBreaking strings down into important words\n    \n### Grammars\n\nSpecifying and deconstructing valid sentences\n    \n### Parsing\n\nTurning sentences into trees\n    \n### Interpreting\n\nSimulating programs\n    \n### Building a Web Browser\n\nInterpreting HTML and JavaScript\n    \n### Wrap-up\n\nExam testing your knowledge", "name": "Programming Languages", "language": "en", "homepage": "https://www.udacity.com/course/programming-languages--cs262?utm_medium=referral&utm_campaign=api", "shortDescription": "This course is an introduction to the fundamentals of programming languages. Concepts include how to specify and process valid strings, sentences and program structures.", "description": "This class will give you an introduction to the fundamentals of programming languages. Key concepts include how to specify and process valid strings, sentences and program structures. "}, {"lectures": "### Lesson 1: Winning Poker Hands\n\nSteps of the design process; Developing for clarity and generality; \nArguments for program correctness; Experimentation and simulation.; \nDesign tradeoffs; Simplicity and Clarity. Decomposition and composability.\n                \n### Lesson 2: Back of the Envelope\n\n\nBack of envelope calculations; When to use brute force and when to be \nclever; The Zebra puzzle; Generator expressions; Permutations and \ncombinations. Cryptarithmetic; Recursive and wishful thinking; Longest palindrome \nsubstring algorithm.\n                \n### Lesson 3: Regular Expressions, other languages and interpreters                \n\nDefining the language of regular expressions; Interpreting the language; \nDefining the set of strings matched by a regular expression;  \nOther languages.\n                \n### Lesson 4: Dealing with complexity through search\n                \n\nSearch: finding your way with a flashlight or boat; pouring water. \nAnalyzing the efficiency of an algorithm; Recurrence relations; Matching \ndata types with algorithms.\n### Lesson 5: Dealing with uncertainty through probability\n                \n\nProbability: the game of Pig; Maximizing expected utility to optimize strategy. \n  \n### Lesson 6: Word Games                \n\nManaging complexity; Large sets of words; Appropriate data structures; Word games. \n                \n### Lesson 7: Conclusion\n\nInterviews and Practice Exam", "name": "Design of Computer Programs", "language": "en", "homepage": "https://www.udacity.com/course/design-of-computer-programs--cs212?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn how to model problems, and how to optimize performance by using some of the advanced features of Python.", "description": "Understanding how to approach programming problems and devise a solution is an essential skill for any Python developer. In this course, you\u2019ll learn new concepts, patterns, and methods that will expand your coding abilities from programming expert, Peter Norvig."}, {"lectures": "### Lesson 1: Rescuing Apollo 13, Part 1\n\nIntroduction to the Forward Euler Method\n\n### Lesson 2: Rescuing Apollo 13, Part 2\n\nComparing solvers, Heun\u2019s Method, and the Symplectic Euler Method\n\n### Lesson 3: Analyzing the Spread of Diseases\n\nImplicit methods and stiffness\n\n### Lesson 4: There\u2019s Plenty of Fish in the Sea?\n\nStability, sensitivity, and optimization\n\n### Lesson 5: Antilock Brake Systems\n\nFriction, equilibria, and control theory\n\n### Lesson 6: The Path of a Forest Fire\n\nPartial differential equations and heat conduction\n\n### Lesson 7: Advanced Applications of Numerical Methods\n\nChaos, software, and predictive capability", "name": "Differential Equations in Action", "language": "en", "homepage": "https://www.udacity.com/course/differential-equations-in-action--cs222?utm_medium=referral&utm_campaign=api", "shortDescription": "Write Python code to find numerical solutions to systems of differential equations. The models you create will fight wildfires, bring spaceships back to earth, and more!", "description": "In this course, you'll hone your problem-solving skills through learning to find numerical solutions to systems of differential equations. You'll write code in Python to fight forest fires, rescue the Apollo 13 astronauts, stop the spread of epidemics, and resolve other real-world dilemmas."}, {"lectures": "### Lesson 1: How Debuggers work\n\nTheory: Scientific method and its application to debugging.  \nFun fact: First bug in the history of computer science.  \nPractice: Building a simple tracer.\n\n### Lesson 2: Asserting Expectations\n\nTheory: Assertions in testing and in debugging.  \nFun fact: The most expensive bug in history.  \nPractice: Improving the tracer.\n\n### Lesson 3: Simplifying Failures\n\nTheory: Strategy of simplifying failures. Binary search. Delta debugging principle.  \nFun fact: Mozilla bugathon.  \nPractice: Building a delta debugger.\n\n### Lesson 4: Tracking Origins\n\nTheory: Cause-effect chain. Deduction. Dependencies. Slices.  \nFun fact: Sherlock Holmes and Doctor Watson.  \nPractice: Improving the delta debugger.\n\n### Lesson 5: Reproducing Failures\n\nTheory: Types of bugs (Bohr bug, Heisenbug, Mandelbug, Schrodinbug). Systematic reproduction process.  \nFun fact: Mad laptop bug.  \nPractice: Building a statistic debugging tool.\n\n### Lesson 6: Learning from Mistakes\n\nTheory: Bug database management. Classifying bugs. Bug maps. Learning from mistakes.   \nFun fact: Programmer with the most buggy code.  \nPractice: Improving your tools and practicing on a real world bug database.", "name": "Software Debugging", "language": "en", "homepage": "https://www.udacity.com/course/software-debugging--cs259?utm_medium=referral&utm_campaign=api", "shortDescription": "In this course you will learn how to debug programs systematically using scientific methods and build several automated debugging tools in Python.", "description": "In this class you will learn how to debug programs systematically, how to automate the debugging process and build several automated debugging tools in Python."}, {"lectures": "### Lesson 1: Challenging Problems\n\nAn introduction to tough problems and their analysis\n\n### Lesson 2: Understanding Hardness\n\nWhat we mean when a problem is \u201chard\u201d and the concept of NP-completeness\n\n### Lesson 3: Showing Hardness\n\nTools to let you recognize and prove that a problem is hard\n\n### Lesson 4: Intelligent Force\n\nSmart techniques to solve problems that should \u2013 theoretically \u2013 be impossible to solve\n\n### Lesson 5: Sloppy Solutions\n\nGaining speed by accepting approximate solutions\n\n### Lesson 6: Poking Around\n\nWhy randomness can be of help \u2013 sometimes. An introduction to complexity classes.\n\n### Lesson 7: Ultimate Limits\n\nProblems that no computer can ever solve. In theory.", "name": "Intro to Theoretical Computer Science", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-theoretical-computer-science--cs313?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the basic concepts in theoretical computer science. Discover what they imply for solving tough computational challenges.", "description": "This class teaches you about basic concepts in theoretical computer science -- such as NP-completeness -- and what they imply for solving tough algorithmic problems."}, {"lectures": "**Lesson 1:**  Introduction to Hardware Verification\n\n**Lesson 2:**  Basic stimulus modeling and generation\n\n**Lesson 3:**  Interfacing to the Hardware Model\n\n**Lesson 4:**  Monitoring and Functional Coverage\n\n**Lesson 5:**  Checking\n\n**Lesson 6:**  Aspect Oriented Programming\n\n**Lesson 7:**  Reuse Methodology\n\n**Lesson 8:**  Debugging\n\n**Lesson 9:** Conclusion and Exam", "name": "Functional Hardware Verification", "language": "en", "homepage": "https://www.udacity.com/course/functional-hardware-verification--cs348?utm_medium=referral&utm_campaign=api", "shortDescription": "This course will teach you how to efficiently verify chip functionality, learn about automated test generation, and learn to improve code reuse.", "description": "When developing chips it is essential that they get verified thoroughly because it is very hard or impossible to fix them once they have been manufactured.  In this class, you will learn how to program verification environments that verify chip functionality efficiently, as well as understand and leverage automation such as constrained random test generation and improve code reuse leveraging a standardized methodology."}, {"lectures": "### Lesson 1: How can we measure the circumference of the Earth?\n\nBasics of geometry and trigonometry\n\n### Lesson 2: How do objects move?\n\nData analysis and kinematics\n\n### Lesson 3: What causes motion?\n\nForces, acceleration, and Newton\u2019s Laws\n\n### Lesson 4: How can we use motion?\n\nWork, energy, and simple machines\n\n### Lesson 5: How can we determine our longitude at sea?\n\nSimple harmonic motion\n\n### Lesson 6: What is electricity?\n\nCharge and electric fields\n\n### Lesson 7: What is left to discover?\n\nModern physics and open questions", "name": "Intro to Physics", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-physics--ph100?utm_medium=referral&utm_campaign=api", "shortDescription": "Go to the places where big physics discoveries were made in the past and make them yourself. You\u2019ll visit Italy, the Netherlands, and the UK as you learn basic physics.", "description": "Study physics abroad in Europe -- virtually! Learn the basics of physics on location in Italy, the Netherlands and the UK, by answering some of the discipline's major questions from over the last 2000 years. "}, {"lectures": "## Lesson 1: Introduction to traits and heredity\nTrait variation and categorization, basic models of inheritance, and the connection via DNA. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_1_Concept_Map.pdf) for this lesson.\n\n## Lesson 2: Defining the genome\nDNA structure, chromosomes, and genome organization. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_2_Concept_Map.pdf) for this lesson.\n\n## Lesson 3: How a genome works\nProtein coding genes, transcription, translation, discerning the genetic code, and alleles. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_3_Concept_Map.pdf) for this lesson.\n\n## Lesson 4: Gene regulation\nNon-coding DNA, regulatory regions of genes, and transcription factors. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_4_Concept_Map.pdf) for this lesson.\n\n## Lesson 5: Transmission of genes and traits\nFamily relationships and pedigrees, inheritance patterns, allele dominance, and chromosome dynamics. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_5_Concept_Map.pdf) for this lesson.\n\n## Lesson 6: Origin of mutation/variation\nTypes of mutations, various causes of mutation, allelic frequency, and the spread of alleles in a population. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_6_Concept_Map.pdf) for this lesson.\n\n## Lesson 7: How to obtain and interpret personal genetic information\nPersonalized genetics: sample acquisition, DNA extraction and processing, and interpretation of results. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_7_Concept_Map.pdf) for this lesson.\n\n## Lesson 8: Simple genetic traits\nMolecular causes of monogenic traits, loss-of-function vs. gain-of-function alleles, and dominance. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_8_Concept_Map.pdf) for this lesson.\n\n## Lesson 9: Multifactorial traits\nPolygenic traits, complex traits with an environmental effect, qualitative and quantitative measures, twin studies, relative risk, and genome-wide association studies (GWAS). Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_9_Concept_Map.pdf) for this lesson.\n\n## Lesson 10: Pharmacogenetics: genes and drugs\nPharmacokinetics and pharmacodynamics, alleles affecting drug metabolism, and personalized medicine. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_10_Concept_Map.pdf) for this lesson.\n\n## Lesson 11: Human ancestry and evolution\nIdentity by state (IBS), Identity by descent (IBD), relative finder, maternal and paternal lineages, neanderthal interbreeding, and human/chimp evolution. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_11_Concept_Map.pdf) for this lesson.\n\n## Lesson 12: The immortal genome (putting genetics to work)\nPersonal decisions, legal questions, professional options, and the future of genetics. Check out the [concept map](http://content.udacity-data.com/course/bio110/Lesson_12_Concept_Map.pdf) for this lesson.\n\n## Bonus Lesson: Discovering DNA in your Kitchen\nUsing only normal household items, even YOU can extract DNA and see it live and in person. At the end of this lesson you'll have the best new party trick EVER. (just remember to bring strawberries) [Here](http://content.udacity-data.com/course/bio110/Kitchen_DNA_Extraction_from_Strawberries.pdf) is the protocol/procedure to make it happen.", "name": "Tales from the Genome", "language": "en", "homepage": "https://www.udacity.com/course/tales-from-the-genome--bio110?utm_medium=referral&utm_campaign=api", "shortDescription": "Learn the basics of genetics, with a personal twist. This class is all about DNA and how it shapes who we are.", "description": "This course is a journey into the biology of the human genome and will highlight the scientific, social, and personal perspectives of people living with a variety of traits."}, {"lectures": "Lesson 1:  Introduction to Psychology\n\nLesson 2: Research Methods in Psychology\n\nLesson 3: The Biology of Behavior\n\nLesson 4: Sensation and Perception\n\nLesson 5: Human Development\n\nLesson 6: Consciousness\n\nLesson 7: Learning\n\nLesson 8: Memory\n\nLesson 9: Language and Thought\n\nLesson 10: Intelligence\n\nLesson 11: Motivation and Emotion\n\nLesson 12: Stress and Health\n\nLesson 13: Personality\n\nLesson 14: Social Behavior\n\nLesson 15: Psychological Disorders\n\nLesson 16: Treatments for Psychological Disorders", "name": "Intro to Psychology", "language": "en", "homepage": "https://www.udacity.com/course/intro-to-psychology--ps001?utm_medium=referral&utm_campaign=api", "shortDescription": "Go on a journey through psychological concepts and principles to enable you to gain a more in-depth understanding of human thought and behavior.", "description": "Introduction to Psychology is a journey through all of the major psychological concepts and principles. The knowledge gained from this course will allow students to critically evaluate psychological research and have a more in-depth understanding of human thought and behavior."}, {"lectures": "###Supervised Learning\n- Lesson 0: Machine Learning is the ROX\n- Lesson 1: Decision Trees\n- Lesson 2: Regression and Classification\n- Lesson 3: Neural Networks\n- Lesson 4: Instance-Based Learning\n- Lesson 5: Ensemble B&B\n- Lesson 6: Kernel Methods and Support Vector Machines (SVM)s\n- Lesson 7: Computational Learning Theory\n- Lesson 8: VC Dimensions\n- Lesson 9: Bayesian Learning\n- Lesson 10: Bayesian Inference\n\n###Unsupervised Learning\n- Lesson 1: Randomized optimization\n- Lesson 2: Clustering\n- Lesson 3: Feature Selection\n- Lesson 4: Feature Transformation\n- Lesson 5: Information Theory\n\n###Reinforcement Learning\n- Lesson 1: Markov Decision Processes\n- Lesson 2: Reinforcement Learning\n- Lesson 3: Game Theory\n- Lesson 4: Game Theory, Continued", "name": "Machine Learning", "language": "en", "homepage": "https://www.udacity.com/course/machine-learning--ud262?utm_medium=referral&utm_campaign=api", "shortDescription": "In this course, you'll learn how to apply Supervised, Unsupervised and Reinforcement Learning techniques for solving a range of data science problems.", "description": "<i>This class is offered as CS7641 at Georgia Tech where it is a part of the [Online Masters Degree (OMS)](http://www.omscs.gatech.edu/). Taking this course here will not earn credit towards the OMS degree.</i>\n\nMachine Learning is a graduate-level course covering the area of Artificial Intelligence concerned with computer programs that modify and improve their performance through experiences. \n\nThe first part of the course covers Supervised Learning, a machine learning task that makes it possible for your phone to recognize your voice, your email to filter spam, and for computers to learn a bunch of other cool stuff.\n\nIn part two, you will learn about Unsupervised Learning. Ever wonder how Netflix can predict what movies you'll like? Or how Amazon knows what you want to buy before you do? Such answers can be found in this section!\n\nFinally, can we program machines to learn like humans? This Reinforcement Learning section will teach you the algorithms for designing self-learning agents like us!"}]